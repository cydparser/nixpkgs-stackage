# Generated by stackage2nix 0.7.2 from "/nix/store/0ryf0vva8klalvj183m016pi3776xz2p-stackage-lts/lts-12.9.yaml"
{ pkgs, stdenv, callPackage }:

self: {
  "ALUT" = callPackage
    ({ mkDerivation, base, freealut, OpenAL, StateVar, transformers }:
     mkDerivation {
       pname = "ALUT";
       version = "2.4.0.2";
       sha256 = "11sb715z6rkmwf9n7l9q32g81qiv2ld8a9z42dfxiwgmh2ilsdmq";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base OpenAL StateVar transformers ];
       librarySystemDepends = [ freealut ];
       homepage = "https://github.com/haskell-openal/ALUT";
       description = "A binding for the OpenAL Utility Toolkit";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) freealut;};
  "ANum" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "ANum";
       version = "0.2.0.2";
       sha256 = "06mvkp9b0hxlp1w2yp7bb6340l88mzs15azx7nma401icqdhvbpn";
       libraryHaskellDepends = [ base ];
       testHaskellDepends = [ base ];
       homepage = "https://github.com/DanBurton/ANum#readme";
       description = "Num instance for Applicatives provided via the ANum newtype";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Agda" = callPackage
    ({ mkDerivation, alex, array, async, base, binary, blaze-html
     , boxes, bytestring, Cabal, containers, cpphs, data-hash, deepseq
     , directory, EdisonCore, edit-distance, emacs, equivalence
     , filemanip, filepath, geniplate-mirror, gitrev, happy, hashable
     , hashtables, haskeline, ieee754, mtl, murmur-hash, pretty, process
     , regex-tdfa, stm, strict, template-haskell, text, time
     , transformers, unordered-containers, uri-encode, zlib
     }:
     mkDerivation {
       pname = "Agda";
       version = "2.5.4.1";
       sha256 = "0bxpibsk98n9xp42d92ma5vj2fam8rsnl61fbhr3askfjdvalnbp";
       isLibrary = true;
       isExecutable = true;
       enableSeparateDataOutput = true;
       setupHaskellDepends = [ base Cabal filemanip filepath process ];
       libraryHaskellDepends = [
         array async base binary blaze-html boxes bytestring containers
         data-hash deepseq directory EdisonCore edit-distance equivalence
         filepath geniplate-mirror gitrev hashable hashtables haskeline
         ieee754 mtl murmur-hash pretty process regex-tdfa stm strict
         template-haskell text time transformers unordered-containers
         uri-encode zlib
       ];
       libraryToolDepends = [ alex cpphs happy ];
       executableHaskellDepends = [ base directory filepath process ];
       executableToolDepends = [ emacs ];
       postInstall = ''
         files=("$data/share/ghc-"*"/"*"-ghc-"*"/Agda-"*"/lib/prim/Agda/"{Primitive.agda,Builtin"/"*.agda})
         for f in "''${files[@]}" ; do
           $out/bin/agda $f
         done
         for f in "''${files[@]}" ; do
           $out/bin/agda -c --no-main $f
         done
         $out/bin/agda-mode compile
       '';
       homepage = "http://wiki.portal.chalmers.se/agda/";
       description = "A dependently typed functional programming language and proof assistant";
       license = "unknown";
     }) {inherit (pkgs) emacs;};
  "Allure" = callPackage
    ({ mkDerivation, async, base, containers, enummapset, filepath
     , LambdaHack, optparse-applicative, random, template-haskell, text
     , transformers, zlib
     }:
     mkDerivation {
       pname = "Allure";
       version = "0.8.3.0";
       sha256 = "1yzqiidc8qbjlpgs2d3jkikzggyd7ajq7i7l1dgwqv6sh4r030vb";
       isLibrary = false;
       isExecutable = true;
       enableSeparateDataOutput = true;
       executableHaskellDepends = [
         async base containers enummapset filepath LambdaHack
         optparse-applicative random template-haskell text transformers zlib
       ];
       testHaskellDepends = [
         base containers enummapset filepath LambdaHack optparse-applicative
         random template-haskell text transformers zlib
       ];
       doHaddock = false;
       homepage = "http://allureofthestars.com";
       description = "Near-future Sci-Fi roguelike and tactical squad game";
       license = "unknown";
     }) {};
  "BiobaseNewick" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, binary, cereal
     , cereal-text, cmdargs, containers, fgl, ForestStructures
     , QuickCheck, test-framework, test-framework-quickcheck2
     , test-framework-th, text, text-binary, vector
     }:
     mkDerivation {
       pname = "BiobaseNewick";
       version = "0.0.0.2";
       sha256 = "1g8kdmraxv0qf3nzm7hi36nhw0j8kyjmjlwslp7a5n2zly2gcck4";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         aeson attoparsec base binary cereal cereal-text containers fgl
         ForestStructures QuickCheck text text-binary vector
       ];
       executableHaskellDepends = [
         base cmdargs ForestStructures text vector
       ];
       testHaskellDepends = [
         aeson base binary cereal QuickCheck test-framework
         test-framework-quickcheck2 test-framework-th
       ];
       homepage = "https://github.com/choener/BiobaseNewick";
       description = "Newick file format parser";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Boolean" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "Boolean";
       version = "0.2.4";
       sha256 = "1y7f8lqx86m06ccq1bjym2hywc7r17s2bvx16jswb2ibn09n08b7";
       libraryHaskellDepends = [ base ];
       description = "Generalized booleans and numbers";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "BoundedChan" = callPackage
    ({ mkDerivation, array, base }:
     mkDerivation {
       pname = "BoundedChan";
       version = "1.0.3.0";
       sha256 = "0vf4mlw08n056g5256cf46m5xsijng5gvjx7ccm4r132gznyl72k";
       libraryHaskellDepends = [ array base ];
       description = "Implementation of bounded channels";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Cabal" = callPackage
    ({ mkDerivation, array, base, binary, bytestring, containers
     , deepseq, directory, filepath, mtl, parsec, pretty, process, text
     , time, transformers, unix
     }:
     mkDerivation {
       pname = "Cabal";
       version = "2.2.0.1";
       sha256 = "0yqa6fm9jvr0ka6b1mf17bf43092dc1bai6mqyiwwwyz0h9k1d82";
       setupHaskellDepends = [ mtl parsec ];
       libraryHaskellDepends = [
         array base binary bytestring containers deepseq directory filepath
         mtl parsec pretty process text time transformers unix
       ];
       doCheck = false;
       homepage = "http://www.haskell.org/cabal/";
       description = "A framework for packaging Haskell software";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ChannelT" = callPackage
    ({ mkDerivation, base, free, mmorph, mtl, transformers-base }:
     mkDerivation {
       pname = "ChannelT";
       version = "0.0.0.7";
       sha256 = "183pghm74vk1vdcn0mdn6g5q284sncpl1cc49lpczz1wbr15s89y";
       libraryHaskellDepends = [ base free mmorph mtl transformers-base ];
       homepage = "https://github.com/pthariensflame/ChannelT";
       description = "Generalized stream processors";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ChasingBottoms" = callPackage
    ({ mkDerivation, array, base, containers, mtl, QuickCheck, random
     , syb
     }:
     mkDerivation {
       pname = "ChasingBottoms";
       version = "1.3.1.4";
       sha256 = "06cynx6hcbfpky7qq3b3mjjgwbnaxkwin3znbwq4b9ikiw0ng633";
       libraryHaskellDepends = [
         base containers mtl QuickCheck random syb
       ];
       testHaskellDepends = [
         array base containers mtl QuickCheck random syb
       ];
       description = "For testing partial and infinite values";
       license = stdenv.lib.licenses.mit;
     }) {};
  "Clipboard" = callPackage
    ({ mkDerivation, base, directory, unix, utf8-string, X11 }:
     mkDerivation {
       pname = "Clipboard";
       version = "2.3.2.0";
       sha256 = "1dr5ifmy5azib140bri9rzlq69jic430v9cv372jb42r78cci0iz";
       libraryHaskellDepends = [ base directory unix utf8-string X11 ];
       homepage = "http://haskell.org/haskellwiki/Clipboard";
       description = "System clipboard interface";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ClustalParser" = callPackage
    ({ mkDerivation, base, cmdargs, either-unwrap, hspec
     , hspec-discover, parsec, text, vector
     }:
     mkDerivation {
       pname = "ClustalParser";
       version = "1.2.3";
       sha256 = "0wjs6bsbyykrm0hjdybnap86zsnhjjifampm08dqg7fqp7f7pmpy";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base parsec text vector ];
       executableHaskellDepends = [ base cmdargs either-unwrap ];
       testHaskellDepends = [ base hspec hspec-discover parsec text ];
       description = "Libary for parsing Clustal tools output";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "DAV" = callPackage
    ({ mkDerivation, base, bytestring, case-insensitive, containers
     , data-default, exceptions, haskeline, http-client, http-client-tls
     , http-types, lens, mtl, network, network-uri, optparse-applicative
     , transformers, transformers-base, transformers-compat, utf8-string
     , xml-conduit, xml-hamlet
     }:
     mkDerivation {
       pname = "DAV";
       version = "1.3.2";
       sha256 = "0sai0b7bxwif5czmmdik5dx318drx18inid87wfrxckrflsi8cv1";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base bytestring case-insensitive containers data-default exceptions
         http-client http-client-tls http-types lens mtl transformers
         transformers-base transformers-compat utf8-string xml-conduit
         xml-hamlet
       ];
       executableHaskellDepends = [
         base bytestring case-insensitive containers data-default exceptions
         haskeline http-client http-client-tls http-types lens mtl network
         network-uri optparse-applicative transformers transformers-base
         transformers-compat utf8-string xml-conduit xml-hamlet
       ];
       homepage = "http://floss.scru.org/hDAV";
       description = "RFC 4918 WebDAV support";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "DRBG" = callPackage
    ({ mkDerivation, base, binary, bytestring, cereal, cipher-aes128
     , crypto-api, crypto-api-tests, cryptohash-cryptoapi, entropy
     , HUnit, mtl, parallel, prettyclass, QuickCheck, tagged
     , test-framework, test-framework-hunit
     }:
     mkDerivation {
       pname = "DRBG";
       version = "0.5.5";
       sha256 = "1z9vqc1nw0mf2sqgddcipmlkz6mckq9wnrzqqdy3rj3c90135pr1";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [
         base bytestring cereal cipher-aes128 crypto-api
         cryptohash-cryptoapi entropy mtl parallel prettyclass tagged
       ];
       testHaskellDepends = [
         base binary bytestring cereal cipher-aes128 crypto-api
         crypto-api-tests cryptohash-cryptoapi entropy HUnit mtl parallel
         prettyclass QuickCheck tagged test-framework test-framework-hunit
       ];
       doCheck = false;
       description = "Deterministic random bit generator (aka RNG, PRNG) based HMACs, Hashes, and Ciphers";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Decimal" = callPackage
    ({ mkDerivation, base, deepseq, HUnit, QuickCheck, test-framework
     , test-framework-hunit, test-framework-quickcheck2
     }:
     mkDerivation {
       pname = "Decimal";
       version = "0.5.1";
       sha256 = "0k7kh05mr2f54w1lpgq1nln0h8k6s6h99dyp5jzsb9cfbb3aap2p";
       libraryHaskellDepends = [ base deepseq ];
       testHaskellDepends = [
         base deepseq HUnit QuickCheck test-framework test-framework-hunit
         test-framework-quickcheck2
       ];
       homepage = "https://github.com/PaulJohnson/Haskell-Decimal";
       description = "Decimal numbers with variable precision";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Diff" = callPackage
    ({ mkDerivation, array, base, directory, pretty, process
     , QuickCheck, test-framework, test-framework-quickcheck2
     }:
     mkDerivation {
       pname = "Diff";
       version = "0.3.4";
       sha256 = "0bqcdvhxx8dmqc3793m6axg813wv9ldz2j37f1wygbbrbbndmdvp";
       libraryHaskellDepends = [ array base pretty ];
       testHaskellDepends = [
         array base directory pretty process QuickCheck test-framework
         test-framework-quickcheck2
       ];
       description = "O(ND) diff algorithm in haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Earley" = callPackage
    ({ mkDerivation, base, criterion, deepseq, ListLike, parsec
     , QuickCheck, tasty, tasty-hunit, tasty-quickcheck
     }:
     mkDerivation {
       pname = "Earley";
       version = "0.12.1.0";
       sha256 = "07dxsl2cvb40z2z41a263xpg5mhplaqj9p2qjhaw6q5rkjz9653k";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base ListLike ];
       testHaskellDepends = [
         base QuickCheck tasty tasty-hunit tasty-quickcheck
       ];
       benchmarkHaskellDepends = [
         base criterion deepseq ListLike parsec
       ];
       description = "Parsing all context-free grammars using Earley's algorithm";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Ebnf2ps" = callPackage
    ({ mkDerivation, array, base, containers, directory, happy
     , old-time, unix
     }:
     mkDerivation {
       pname = "Ebnf2ps";
       version = "1.0.15";
       sha256 = "0jrbxanhp81n3nabdw5s1gh8a78hy4bgnv5slqzrkj6n47bygk0f";
       isLibrary = false;
       isExecutable = true;
       executableHaskellDepends = [
         array base containers directory old-time unix
       ];
       executableToolDepends = [ happy ];
       doHaddock = false;
       homepage = "https://github.com/FranklinChen/Ebnf2ps";
       description = "Peter's Syntax Diagram Drawing Tool";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "EdisonAPI" = callPackage
    ({ mkDerivation, base, mtl }:
     mkDerivation {
       pname = "EdisonAPI";
       version = "1.3.1";
       sha256 = "0vmmlsj8ggbpwx6fkf5fvb6jp0zpx6iba6b28m80lllr2p8bi8wm";
       libraryHaskellDepends = [ base mtl ];
       homepage = "http://rwd.rdockins.name/edison/home/";
       description = "A library of efficient, purely-functional data structures (API)";
       license = stdenv.lib.licenses.mit;
     }) {};
  "EdisonCore" = callPackage
    ({ mkDerivation, array, base, containers, EdisonAPI, mtl
     , QuickCheck
     }:
     mkDerivation {
       pname = "EdisonCore";
       version = "1.3.2.1";
       sha256 = "0fgj5iwiv3v2gdgx7kjcr15dcs4x1kvmjspp3p99wyhh0x6h3ikk";
       libraryHaskellDepends = [
         array base containers EdisonAPI mtl QuickCheck
       ];
       homepage = "http://rwd.rdockins.name/edison/home/";
       description = "A library of efficient, purely-functional data structures (Core Implementations)";
       license = stdenv.lib.licenses.mit;
     }) {};
  "FenwickTree" = callPackage
    ({ mkDerivation, base, QuickCheck, template-haskell }:
     mkDerivation {
       pname = "FenwickTree";
       version = "0.1.2.1";
       sha256 = "0g7hhkim16wsjf8l79hqkiv1lain6jm8wpiml1iycra3n9i2s5ww";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [ base QuickCheck template-haskell ];
       testHaskellDepends = [ base QuickCheck template-haskell ];
       homepage = "https://github.com/mgajda/FenwickTree";
       description = "Data structure for fast query and update of cumulative sums";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Fin" = callPackage
    ({ mkDerivation, alg, base, foldable1, natural-induction, peano }:
     mkDerivation {
       pname = "Fin";
       version = "0.2.5.0";
       sha256 = "0jh64an111k7a3limqc03irk914s8asy6h4iik7layw4pagpsiyc";
       libraryHaskellDepends = [
         alg base foldable1 natural-induction peano
       ];
       description = "Finite totally-ordered sets";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "FindBin" = callPackage
    ({ mkDerivation, base, directory, filepath }:
     mkDerivation {
       pname = "FindBin";
       version = "0.0.5";
       sha256 = "197xvn05yysmibm1p5wzxfa256lvpbknr5d1l2ws6g40w1kpk717";
       libraryHaskellDepends = [ base directory filepath ];
       homepage = "https://github.com/audreyt/findbin";
       description = "Locate directory of original program";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "FontyFruity" = callPackage
    ({ mkDerivation, base, binary, bytestring, containers, deepseq
     , directory, filepath, text, vector, xml
     }:
     mkDerivation {
       pname = "FontyFruity";
       version = "0.5.3.3";
       sha256 = "0p02w0v93y11f7rzsc1im2rvld6h0pgrhmd827ypzamibry6xl5h";
       libraryHaskellDepends = [
         base binary bytestring containers deepseq directory filepath text
         vector xml
       ];
       description = "A true type file format loader";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ForestStructures" = callPackage
    ({ mkDerivation, base, containers, criterion, fgl, QuickCheck
     , tasty, tasty-quickcheck, tasty-th, unordered-containers, vector
     , vector-th-unbox
     }:
     mkDerivation {
       pname = "ForestStructures";
       version = "0.0.0.2";
       sha256 = "0gv9hvwbql015k28xvphx4dllpfp5dgi36l3bkg48630xrzhcx7y";
       libraryHaskellDepends = [
         base containers fgl QuickCheck unordered-containers vector
         vector-th-unbox
       ];
       testHaskellDepends = [
         base containers QuickCheck tasty tasty-quickcheck tasty-th vector
       ];
       benchmarkHaskellDepends = [ base criterion ];
       homepage = "https://github.com/choener/ForestStructures";
       description = "Tree- and forest structures";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "GLFW-b" = callPackage
    ({ mkDerivation, base, bindings-GLFW, deepseq, HUnit
     , test-framework, test-framework-hunit
     }:
     mkDerivation {
       pname = "GLFW-b";
       version = "3.2.1.0";
       sha256 = "19mngkprzlm322pfyljvm4lyk1j7j8ss50m5kzzmkwk3mph25h1i";
       libraryHaskellDepends = [ base bindings-GLFW deepseq ];
       testHaskellDepends = [
         base bindings-GLFW deepseq HUnit test-framework
         test-framework-hunit
       ];
       doCheck = false;
       description = "Bindings to GLFW OpenGL library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "GLURaw" = callPackage
    ({ mkDerivation, base, libGL, libGLU, OpenGLRaw, transformers }:
     mkDerivation {
       pname = "GLURaw";
       version = "2.0.0.4";
       sha256 = "1i2xi35n5z0d372px9mh6cyhgg1m0cfaiy3fnspkf6kbn9fgsqxq";
       libraryHaskellDepends = [ base OpenGLRaw transformers ];
       librarySystemDepends = [ libGL libGLU ];
       homepage = "http://www.haskell.org/haskellwiki/Opengl";
       description = "A raw binding for the OpenGL graphics system";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) libGL; inherit (pkgs) libGLU;};
  "GLUT" = callPackage
    ({ mkDerivation, array, base, containers, OpenGL, StateVar
     , transformers
     }:
     mkDerivation {
       pname = "GLUT";
       version = "2.7.0.14";
       sha256 = "01i162fly4q1751fp60lgkzlb8kr0qqbvmxj74zc6skb19qggy2w";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         array base containers OpenGL StateVar transformers
       ];
       homepage = "http://www.haskell.org/haskellwiki/Opengl";
       description = "A binding for the OpenGL Utility Toolkit";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "GenericPretty" = callPackage
    ({ mkDerivation, base, ghc-prim, pretty }:
     mkDerivation {
       pname = "GenericPretty";
       version = "1.2.2";
       sha256 = "0g5frpzq8hr2wqbf91cxcyxqqsw06p1w9f1sm3k6v1hz13kpmspf";
       libraryHaskellDepends = [ base ghc-prim pretty ];
       homepage = "https://github.com/RazvanRanca/GenericPretty";
       description = "A generic, derivable, haskell pretty printer";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Glob" = callPackage
    ({ mkDerivation, base, containers, directory, dlist, filepath
     , HUnit, QuickCheck, test-framework, test-framework-hunit
     , test-framework-quickcheck2, transformers, transformers-compat
     }:
     mkDerivation {
       pname = "Glob";
       version = "0.9.2";
       sha256 = "1rbwcq9w9951qsnp13vqcm9r01yax2yh1wk8s4zxa3ckk9717iwg";
       libraryHaskellDepends = [
         base containers directory dlist filepath transformers
         transformers-compat
       ];
       testHaskellDepends = [
         base containers directory dlist filepath HUnit QuickCheck
         test-framework test-framework-hunit test-framework-quickcheck2
         transformers transformers-compat
       ];
       homepage = "http://iki.fi/matti.niemenmaa/glob/";
       description = "Globbing library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HCodecs" = callPackage
    ({ mkDerivation, array, base, bytestring, QuickCheck, random
     , semigroups
     }:
     mkDerivation {
       pname = "HCodecs";
       version = "0.5.1";
       sha256 = "0hrib81nw4g7qgka3brypb8k1mg7l37m8gywc7bc44mcg5mn2957";
       libraryHaskellDepends = [
         array base bytestring QuickCheck random semigroups
       ];
       testHaskellDepends = [
         array base bytestring QuickCheck random semigroups
       ];
       homepage = "http://www-db.informatik.uni-tuebingen.de/team/giorgidze";
       description = "A library to read, write and manipulate MIDI, WAVE, and SoundFont2 files";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HDBC" = callPackage
    ({ mkDerivation, base, bytestring, containers, convertible, mtl
     , old-time, text, time, utf8-string
     }:
     mkDerivation {
       pname = "HDBC";
       version = "2.4.0.2";
       sha256 = "0nnvfyivmw5pykbna953yb6z4al1ak5vsd308lpsyv2bczymf1v7";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base bytestring containers convertible mtl old-time text time
         utf8-string
       ];
       homepage = "https://github.com/hdbc/hdbc";
       description = "Haskell Database Connectivity";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HDBC-mysql" = callPackage
    ({ mkDerivation, base, bytestring, Cabal, HDBC, mysqlclient
     , openssl, time, utf8-string, zlib
     }:
     mkDerivation {
       pname = "HDBC-mysql";
       version = "0.7.1.0";
       sha256 = "1kx73pgh1mjg0526i2szk1kbm6d7bhbv64ml1y9nbja3lba8bjc1";
       setupHaskellDepends = [ base Cabal ];
       libraryHaskellDepends = [ base bytestring HDBC time utf8-string ];
       librarySystemDepends = [ mysqlclient openssl zlib ];
       homepage = "http://github.com/ryantm/hdbc-mysql";
       description = "MySQL driver for HDBC";
       license = "LGPL";
     }) {mysqlclient = null; inherit (pkgs) openssl;
         inherit (pkgs) zlib;};
  "HDBC-session" = callPackage
    ({ mkDerivation, base, HDBC }:
     mkDerivation {
       pname = "HDBC-session";
       version = "0.1.2.0";
       sha256 = "1qwnqb62zgmm4dy5qlcj04aczja6yn16c92jc63zkln9pcc7y1da";
       libraryHaskellDepends = [ base HDBC ];
       homepage = "http://khibino.github.io/haskell-relational-record/";
       description = "Bracketed connection for HDBC";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HPDF" = callPackage
    ({ mkDerivation, array, base, base64-bytestring, binary, bytestring
     , containers, errors, HTF, mtl, random, vector, zlib
     }:
     mkDerivation {
       pname = "HPDF";
       version = "1.4.10";
       sha256 = "1m072rc03yx5y4djmvj87kn6n23d9378v3ipl8lj3vzfjgfzsayy";
       libraryHaskellDepends = [
         array base base64-bytestring binary bytestring containers errors
         mtl random vector zlib
       ];
       testHaskellDepends = [ base HTF ];
       homepage = "http://www.alpheccar.org";
       description = "Generation of PDF documents";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HSet" = callPackage
    ({ mkDerivation, base, containers, hashable, hashtables }:
     mkDerivation {
       pname = "HSet";
       version = "0.0.1";
       sha256 = "0snix2qdj1d66v6qj6fl0zizl617kjzbmxiswdd5i0b5lzjkpagb";
       libraryHaskellDepends = [ base containers hashable hashtables ];
       description = "Faux heterogeneous sets";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HSlippyMap" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "HSlippyMap";
       version = "3.0.1";
       sha256 = "03gb5dd59mirwb11b98vbg60w2zwfsbr8akk7qbq01z7n7rkgsr7";
       libraryHaskellDepends = [ base ];
       homepage = "https://github.com/apeyroux/HSlippyMap";
       description = "OpenStreetMap Slippy Map";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HStringTemplate" = callPackage
    ({ mkDerivation, array, base, blaze-builder, bytestring, containers
     , deepseq, directory, filepath, mtl, old-locale, parsec, pretty
     , semigroups, syb, template-haskell, text, time, void
     }:
     mkDerivation {
       pname = "HStringTemplate";
       version = "0.8.7";
       sha256 = "03kbmyh0713j3qhhrl7jqbmsvyq1q82h2yxq45cc9rs55sma8kjg";
       libraryHaskellDepends = [
         array base blaze-builder bytestring containers deepseq directory
         filepath mtl old-locale parsec pretty semigroups syb
         template-haskell text time void
       ];
       description = "StringTemplate implementation in Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HSvm" = callPackage
    ({ mkDerivation, base, containers }:
     mkDerivation {
       pname = "HSvm";
       version = "0.1.0.3.22";
       sha256 = "015b1l2grjx79rvn17nmjnzdc5zh30v30f21svr7a9kn7ic8mb4d";
       libraryHaskellDepends = [ base containers ];
       description = "Haskell Bindings for libsvm";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HTF" = callPackage
    ({ mkDerivation, aeson, aeson-pretty, array, base
     , base64-bytestring, bytestring, containers, cpphs, Diff, directory
     , filepath, haskell-src, HUnit, lifted-base, monad-control, mtl
     , old-time, pretty, process, QuickCheck, random, regex-compat
     , template-haskell, temporary, text, time, unix
     , unordered-containers, vector, xmlgen
     }:
     mkDerivation {
       pname = "HTF";
       version = "0.13.2.4";
       sha256 = "1xibrzs465hg9snwvl6gp6hll6g6c7m8s2ckk8vkfg386pywmi9n";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         aeson array base base64-bytestring bytestring containers cpphs Diff
         directory haskell-src HUnit lifted-base monad-control mtl old-time
         pretty process QuickCheck random regex-compat text time unix vector
         xmlgen
       ];
       executableHaskellDepends = [
         array base cpphs directory HUnit mtl old-time random text
       ];
       testHaskellDepends = [
         aeson aeson-pretty base bytestring directory filepath HUnit mtl
         process random regex-compat template-haskell temporary text
         unordered-containers
       ];
       doCheck = false;
       homepage = "https://github.com/skogsbaer/HTF/";
       description = "The Haskell Test Framework";
       license = stdenv.lib.licenses.lgpl21;
     }) {};
  "HTTP" = callPackage
    ({ mkDerivation, array, base, bytestring, case-insensitive, conduit
     , conduit-extra, deepseq, http-types, httpd-shed, HUnit, mtl
     , network, network-uri, parsec, pureMD5, split, test-framework
     , test-framework-hunit, time, wai, warp
     }:
     mkDerivation {
       pname = "HTTP";
       version = "4000.3.12";
       sha256 = "140r6qy1ay25piv0z3hih11zhigyi08nkwc32097j43pjff6mzx3";
       libraryHaskellDepends = [
         array base bytestring mtl network network-uri parsec time
       ];
       testHaskellDepends = [
         base bytestring case-insensitive conduit conduit-extra deepseq
         http-types httpd-shed HUnit mtl network network-uri pureMD5 split
         test-framework test-framework-hunit wai warp
       ];
       doCheck = false;
       homepage = "https://github.com/haskell/HTTP";
       description = "A library for client-side HTTP";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HUnit" = callPackage
    ({ mkDerivation, base, call-stack, deepseq, filepath }:
     mkDerivation {
       pname = "HUnit";
       version = "1.6.0.0";
       sha256 = "1pnhwqq5v8h48gbp3ibv3skfj25mf4zs5svxcavq93p9cswycj3l";
       libraryHaskellDepends = [ base call-stack deepseq ];
       testHaskellDepends = [ base call-stack deepseq filepath ];
       homepage = "https://github.com/hspec/HUnit#readme";
       description = "A unit testing framework for Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HUnit-approx" = callPackage
    ({ mkDerivation, base, call-stack, HUnit }:
     mkDerivation {
       pname = "HUnit-approx";
       version = "1.1.1.1";
       sha256 = "1brblqpz002jzql9wgzxk5zlfglmkv91s8gcfd6992xv539jfhsa";
       libraryHaskellDepends = [ base call-stack HUnit ];
       testHaskellDepends = [ base call-stack HUnit ];
       homepage = "https://github.com/goldfirere/HUnit-approx";
       description = "Approximate equality for floating point numbers with HUnit";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HaTeX" = callPackage
    ({ mkDerivation, base, bytestring, containers, hashable, matrix
     , parsec, QuickCheck, tasty, tasty-quickcheck, text, transformers
     , wl-pprint-extras
     }:
     mkDerivation {
       pname = "HaTeX";
       version = "3.19.0.0";
       sha256 = "0ja7w9l1pnf4pgbggr8cmsq0234cvsn75b9jzvd64jplhajpgn8z";
       libraryHaskellDepends = [
         base bytestring containers hashable matrix parsec QuickCheck text
         transformers wl-pprint-extras
       ];
       testHaskellDepends = [
         base parsec QuickCheck tasty tasty-quickcheck text
       ];
       homepage = "https://github.com/Daniel-Diaz/HaTeX/blob/master/README.md";
       description = "The Haskell LaTeX library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HandsomeSoup" = callPackage
    ({ mkDerivation, base, containers, hspec, HTTP, hxt, hxt-http, mtl
     , network, network-uri, parsec, transformers
     }:
     mkDerivation {
       pname = "HandsomeSoup";
       version = "0.4.2";
       sha256 = "1yzfrvivvxwlaiqwbjx27rxwq9mmnnpb512vwklzw7nyzg9xmqha";
       isLibrary = true;
       isExecutable = true;
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [
         base containers HTTP hxt hxt-http mtl network network-uri parsec
         transformers
       ];
       testHaskellDepends = [ base hspec hxt ];
       homepage = "https://github.com/egonSchiele/HandsomeSoup";
       description = "Work with HTML more easily in HXT";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HaskellNet" = callPackage
    ({ mkDerivation, array, base, base64-string, bytestring, cryptohash
     , mime-mail, mtl, network, old-time, pretty, text
     }:
     mkDerivation {
       pname = "HaskellNet";
       version = "0.5.1";
       sha256 = "0f581izyh6bdk85i0g07xdp3fdzdfdfjiqpnl89r17vgswdd6i9j";
       libraryHaskellDepends = [
         array base base64-string bytestring cryptohash mime-mail mtl
         network old-time pretty text
       ];
       homepage = "https://github.com/jtdaugherty/HaskellNet";
       description = "Client support for POP3, SMTP, and IMAP";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HaskellNet-SSL" = callPackage
    ({ mkDerivation, base, bytestring, connection, data-default
     , HaskellNet, network, tls
     }:
     mkDerivation {
       pname = "HaskellNet-SSL";
       version = "0.3.4.0";
       sha256 = "03q48g4gzmhjl4a5wwn0q3man8s44pn028a0fidjpmfmgxa95bl3";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [
         base bytestring connection data-default HaskellNet network tls
       ];
       homepage = "https://github.com/dpwright/HaskellNet-SSL";
       description = "Helpers to connect to SSL/TLS mail servers with HaskellNet";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Hoed" = callPackage
    ({ mkDerivation, array, base, bytestring, cereal, cereal-text
     , cereal-vector, clock, containers, deepseq, directory, hashable
     , libgraph, open-browser, primitive, process, QuickCheck
     , regex-tdfa, regex-tdfa-text, semigroups, strict, template-haskell
     , terminal-size, text, transformers, uniplate, unordered-containers
     , vector, vector-th-unbox
     }:
     mkDerivation {
       pname = "Hoed";
       version = "0.5.1";
       sha256 = "1rzlqd1sha6p1cw5w0gpf1w7qsmc6088sjnq1kq44mp12ybxrxm8";
       libraryHaskellDepends = [
         array base bytestring cereal cereal-text cereal-vector clock
         containers deepseq directory hashable libgraph open-browser
         primitive process QuickCheck regex-tdfa regex-tdfa-text semigroups
         strict template-haskell terminal-size text transformers uniplate
         unordered-containers vector vector-th-unbox
       ];
       testHaskellDepends = [ base process QuickCheck ];
       homepage = "https://github.com/MaartenFaddegon/Hoed";
       description = "Lightweight algorithmic debugging";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "HsOpenSSL" = callPackage
    ({ mkDerivation, base, bytestring, Cabal, network, openssl, time }:
     mkDerivation {
       pname = "HsOpenSSL";
       version = "0.11.4.14";
       sha256 = "12blnh5x69wvhw1lx3vk14lm1klhqblgd539ffqnrg2dn9qh4ga4";
       configureFlags = [ "-f-fast-bignum" ];
       setupHaskellDepends = [ base Cabal ];
       libraryHaskellDepends = [ base bytestring network time ];
       librarySystemDepends = [ openssl ];
       testHaskellDepends = [ base bytestring ];
       homepage = "https://github.com/vshabanov/HsOpenSSL";
       description = "Partial OpenSSL binding for Haskell";
       license = stdenv.lib.licenses.publicDomain;
     }) {inherit (pkgs) openssl;};
  "HsOpenSSL-x509-system" = callPackage
    ({ mkDerivation, base, bytestring, HsOpenSSL, unix }:
     mkDerivation {
       pname = "HsOpenSSL-x509-system";
       version = "0.1.0.3";
       sha256 = "14hzjdpv8ld3nw5fcx451w49vq0s8fhs1zh984vpm85b5ypbgp2v";
       libraryHaskellDepends = [ base bytestring HsOpenSSL unix ];
       homepage = "https://github.com/redneb/HsOpenSSL-x509-system";
       description = "Use the system's native CA certificate store with HsOpenSSL";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "IPv6Addr" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, HUnit, iproute, network
     , network-info, random, test-framework, test-framework-hunit, text
     }:
     mkDerivation {
       pname = "IPv6Addr";
       version = "1.1.0";
       sha256 = "0f7dckgiv5yq87gb7fd31k0h4adqi6xmdc010rdb6yfgpbk10k29";
       libraryHaskellDepends = [
         aeson attoparsec base iproute network network-info random text
       ];
       testHaskellDepends = [
         base HUnit test-framework test-framework-hunit text
       ];
       homepage = "https://github.com/MichelBoucey/IPv6Addr";
       description = "Library to deal with IPv6 address text representations";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Imlib" = callPackage
    ({ mkDerivation, array, base, imlib2, X11 }:
     mkDerivation {
       pname = "Imlib";
       version = "0.1.2";
       sha256 = "075x1vcrxdwknzbad05l08i5c79svf714yvv6990ffvsfykiilry";
       libraryHaskellDepends = [ array base X11 ];
       librarySystemDepends = [ imlib2 ];
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) imlib2;};
  "IntervalMap" = callPackage
    ({ mkDerivation, base, Cabal, containers, criterion, deepseq
     , fingertree, QuickCheck, random, SegmentTree, weigh
     }:
     mkDerivation {
       pname = "IntervalMap";
       version = "0.6.0.0";
       sha256 = "06hin9wf1by8aqa7820fsi2339bh82184frkwz3jsb9sqa0hszcg";
       libraryHaskellDepends = [ base containers deepseq ];
       testHaskellDepends = [ base Cabal containers deepseq QuickCheck ];
       benchmarkHaskellDepends = [
         base containers criterion deepseq fingertree random SegmentTree
         weigh
       ];
       homepage = "http://www.chr-breitkopf.de/comp/IntervalMap";
       description = "Containers for intervals, with efficient search";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "JuicyPixels" = callPackage
    ({ mkDerivation, base, binary, bytestring, containers, deepseq, mtl
     , primitive, transformers, vector, zlib
     }:
     mkDerivation {
       pname = "JuicyPixels";
       version = "3.2.9.5";
       sha256 = "0mf3ihr0xy2wc2wzb9a17g0n3p60x7pvm8akwpvhdy8klvs6r744";
       libraryHaskellDepends = [
         base binary bytestring containers deepseq mtl primitive
         transformers vector zlib
       ];
       homepage = "https://github.com/Twinside/Juicy.Pixels";
       description = "Picture loading/serialization (in png, jpeg, bitmap, gif, tga, tiff and radiance)";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "JuicyPixels-blp" = callPackage
    ({ mkDerivation, attoparsec, base, binary, bytestring, directory
     , filepath, hashable, JuicyPixels, optparse-simple, text-show
     , unordered-containers, vector
     }:
     mkDerivation {
       pname = "JuicyPixels-blp";
       version = "0.1.0.1";
       sha256 = "16fcrd8g4pgwhbvp34mqqvmszlkhjs1qryrn1bll3f0zwirhg3ic";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         attoparsec base binary bytestring hashable JuicyPixels text-show
         vector
       ];
       executableHaskellDepends = [
         base bytestring directory filepath JuicyPixels optparse-simple
         text-show unordered-containers
       ];
       homepage = "http://github.com/NCrashed/JuicyPixels-blp#readme";
       description = "BLP format decoder/encoder over JuicyPixels library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "JuicyPixels-extra" = callPackage
    ({ mkDerivation, base, criterion, hspec, JuicyPixels }:
     mkDerivation {
       pname = "JuicyPixels-extra";
       version = "0.3.0";
       sha256 = "08hf3dklz3zaczbffq11z1yjk3hqf53rnz3g9n989ndw8ybkm865";
       revision = "3";
       editedCabalFile = "1xr4vjhzjw3ynibb6693dhcz2jbvbx4yg2bir8w2s98n37gwsxd7";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [ base JuicyPixels ];
       testHaskellDepends = [ base hspec JuicyPixels ];
       benchmarkHaskellDepends = [ base criterion JuicyPixels ];
       homepage = "https://github.com/mrkkrp/JuicyPixels-extra";
       description = "Efficiently scale, crop, flip images with JuicyPixels";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "JuicyPixels-scale-dct" = callPackage
    ({ mkDerivation, base, base-compat, carray, fft, JuicyPixels, time
     }:
     mkDerivation {
       pname = "JuicyPixels-scale-dct";
       version = "0.1.2";
       sha256 = "04rhrmjnh12hh2nz04k245avgdcwqfyjnsbpcrz8j9328j41nf7p";
       revision = "1";
       editedCabalFile = "1snx05qpllybd9yvy03p0lpnmimj0m24x1bxa4svxcsiv56yv9w8";
       libraryHaskellDepends = [
         base base-compat carray fft JuicyPixels
       ];
       testHaskellDepends = [
         base base-compat carray fft JuicyPixels time
       ];
       homepage = "https://github.com/phadej/JuicyPixels-scale-dct#readme";
       description = "Scale JuicyPixels images with DCT";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "LambdaHack" = callPackage
    ({ mkDerivation, assert-failure, async, base, base-compat, binary
     , bytestring, containers, deepseq, directory, enummapset, filepath
     , ghc-prim, hashable, hsini, keys, miniutter, optparse-applicative
     , pretty-show, random, sdl2, sdl2-ttf, stm, template-haskell, text
     , time, transformers, unordered-containers, vector
     , vector-binary-instances, zlib
     }:
     mkDerivation {
       pname = "LambdaHack";
       version = "0.8.3.0";
       sha256 = "0v07c8v7l8yg111fysl735scsbsl9l6q3vzigy7rv05sjfl276ss";
       isLibrary = true;
       isExecutable = true;
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [
         assert-failure async base base-compat binary bytestring containers
         deepseq directory enummapset filepath ghc-prim hashable hsini keys
         miniutter optparse-applicative pretty-show random sdl2 sdl2-ttf stm
         text time transformers unordered-containers vector
         vector-binary-instances zlib
       ];
       executableHaskellDepends = [
         assert-failure async base base-compat binary bytestring containers
         deepseq directory enummapset filepath ghc-prim hashable hsini keys
         miniutter optparse-applicative pretty-show random stm
         template-haskell text time transformers unordered-containers vector
         vector-binary-instances zlib
       ];
       testHaskellDepends = [
         assert-failure async base base-compat binary bytestring containers
         deepseq directory enummapset filepath ghc-prim hashable hsini keys
         miniutter optparse-applicative pretty-show random stm
         template-haskell text time transformers unordered-containers vector
         vector-binary-instances zlib
       ];
       homepage = "https://lambdahack.github.io";
       description = "A game engine library for tactical squad ASCII roguelike dungeon crawlers";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "LibZip" = callPackage
    ({ mkDerivation, base, bindings-libzip, bytestring, directory
     , filepath, HUnit, mtl, time, utf8-string
     }:
     mkDerivation {
       pname = "LibZip";
       version = "1.0.1";
       sha256 = "0ps2psza80jz566c9k377cqn536g6jcbs558jkc60gra5lhf0dm6";
       libraryHaskellDepends = [
         base bindings-libzip bytestring filepath mtl time utf8-string
       ];
       testHaskellDepends = [
         base bindings-libzip bytestring directory filepath HUnit mtl time
         utf8-string
       ];
       homepage = "http://bitbucket.org/astanin/hs-libzip/";
       description = "Bindings to libzip, a library for manipulating zip archives";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "List" = callPackage
    ({ mkDerivation, base, transformers }:
     mkDerivation {
       pname = "List";
       version = "0.6.2";
       sha256 = "0y5qk6pzpcha01pa9133qgmmk9nkgjqxaxlg04993i9g43hjpff4";
       revision = "1";
       editedCabalFile = "11ws93cdzz7k4nvcld2d74155mdgcvyi6f6an7gpf9z4k523c11n";
       libraryHaskellDepends = [ base transformers ];
       homepage = "http://github.com/yairchu/generator";
       description = "List monad transformer and class";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ListLike" = callPackage
    ({ mkDerivation, array, base, bytestring, containers, deepseq
     , dlist, fmlist, HUnit, QuickCheck, random, text, utf8-string
     , vector
     }:
     mkDerivation {
       pname = "ListLike";
       version = "4.6";
       sha256 = "16jsj979mzjrgmpa20pls9ganym3wsps49paks1sb1gmlmwyrkf1";
       revision = "2";
       editedCabalFile = "1mca2r4gjznqdh4kck5cjkn53isgkhvkf3ri09qsn7nsssvgki0g";
       libraryHaskellDepends = [
         array base bytestring containers deepseq dlist fmlist text
         utf8-string vector
       ];
       testHaskellDepends = [
         array base bytestring containers dlist fmlist HUnit QuickCheck
         random text utf8-string vector
       ];
       doCheck = false;
       homepage = "http://github.com/JohnLato/listlike";
       description = "Generic support for list-like structures";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "MemoTrie" = callPackage
    ({ mkDerivation, base, newtype-generics }:
     mkDerivation {
       pname = "MemoTrie";
       version = "0.6.9";
       sha256 = "157p0pi6rrq74a35mq6zkkycv4ah7xhkbrcmnkb9xf7pznw4aq0x";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base newtype-generics ];
       doHaddock = false;
       homepage = "https://github.com/conal/MemoTrie";
       description = "Trie-based memo functions";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "MissingH" = callPackage
    ({ mkDerivation, array, base, containers, directory, filepath
     , hslogger, HUnit, mtl, network, old-locale, old-time, parsec
     , process, random, regex-compat, time, unix
     }:
     mkDerivation {
       pname = "MissingH";
       version = "1.4.0.1";
       sha256 = "0wcvgrmav480w7nf4bl14yi0jq2yzanysxwzwas9hpb28vyjlgr8";
       revision = "1";
       editedCabalFile = "04syc14nz11fay6fm6nlixyflrfhpg4jiyxx6mnxrl6asd3cl989";
       libraryHaskellDepends = [
         array base containers directory filepath hslogger HUnit mtl network
         old-locale old-time parsec process random regex-compat time unix
       ];
       doCheck = false;
       homepage = "http://software.complete.org/missingh";
       description = "Large utility library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "MonadPrompt" = callPackage
    ({ mkDerivation, base, mtl }:
     mkDerivation {
       pname = "MonadPrompt";
       version = "1.0.0.5";
       sha256 = "1nmy7dfzrkd8yfv5i9vlmjq9khnyi76ayvkzgcf783v5hfzcn4mh";
       libraryHaskellDepends = [ base mtl ];
       description = "MonadPrompt, implementation & examples";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "MonadRandom" = callPackage
    ({ mkDerivation, base, mtl, primitive, random, transformers
     , transformers-compat
     }:
     mkDerivation {
       pname = "MonadRandom";
       version = "0.5.1.1";
       sha256 = "0w44jl1n3kqvqaflh82l1wj3xxbhzfs3kf4m8rk7w6fgg8llmnmb";
       libraryHaskellDepends = [
         base mtl primitive random transformers transformers-compat
       ];
       description = "Random-number generation monad";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "MusicBrainz" = callPackage
    ({ mkDerivation, aeson, base, bytestring, conduit, conduit-extra
     , HTTP, http-conduit, http-types, monad-control, resourcet, text
     , time, time-locale-compat, transformers, unliftio-core, vector
     , xml-conduit, xml-types
     }:
     mkDerivation {
       pname = "MusicBrainz";
       version = "0.4";
       sha256 = "0aanc1c43di5wq9c2w0b5lw3p24cwpaksgxy79lqm8qxj8qd3jxr";
       libraryHaskellDepends = [
         aeson base bytestring conduit conduit-extra HTTP http-conduit
         http-types monad-control resourcet text time time-locale-compat
         transformers unliftio-core vector xml-conduit xml-types
       ];
       homepage = "http://floss.scru.org/hMusicBrainz";
       description = "interface to MusicBrainz XML2 and JSON web services";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "Network-NineP" = callPackage
    ({ mkDerivation, base, binary, bytestring, containers, convertible
     , exceptions, hslogger, monad-loops, monad-peel, mstate, mtl
     , network, NineP, regex-posix, stateref, transformers
     }:
     mkDerivation {
       pname = "Network-NineP";
       version = "0.4.3";
       sha256 = "1hsfcicijzqy7vxvknxxq9qa4qx3d1smg6mw4mpvk46nvxny8sc1";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base binary bytestring containers convertible exceptions hslogger
         monad-loops monad-peel mstate mtl network NineP regex-posix
         stateref transformers
       ];
       description = "High-level abstraction over 9P protocol";
       license = "unknown";
     }) {};
  "NineP" = callPackage
    ({ mkDerivation, base, binary, bytestring }:
     mkDerivation {
       pname = "NineP";
       version = "0.0.2.1";
       sha256 = "1k6qdp4zmqjl2f6cqy1zzzl6ncb2m9r0qgh4c24i2h5kkxmm3cab";
       configureFlags = [ "-f-bytestring-in-base" ];
       libraryHaskellDepends = [ base binary bytestring ];
       homepage = "http://9ph.googlecode.com";
       description = "9P2000 in pure Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "NoHoed" = callPackage
    ({ mkDerivation, base, template-haskell }:
     mkDerivation {
       pname = "NoHoed";
       version = "0.1.1";
       sha256 = "0g9vqkpcmn66922z2yqp29h4kp2n2xnz1rva294h0kh39hiklrlv";
       libraryHaskellDepends = [ base template-haskell ];
       homepage = "https://github.com/pepeiborra/NoHoed";
       description = "Placeholder package to preserve debug ability via conditional builds";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "NumInstances" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "NumInstances";
       version = "1.4";
       sha256 = "0ycnwn09izajv330l7a31mc0alifqmxjsn9qmfswwnbg6i4jmnyb";
       libraryHaskellDepends = [ base ];
       homepage = "https://github.com/conal/NumInstances";
       description = "Instances of numeric classes for functions and tuples";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ObjectName" = callPackage
    ({ mkDerivation, base, transformers }:
     mkDerivation {
       pname = "ObjectName";
       version = "1.1.0.1";
       sha256 = "046jm94rmm46cicd31pl54vdvfjvhd9ffbfycy2lxzc0fliyznvj";
       libraryHaskellDepends = [ base transformers ];
       homepage = "https://github.com/svenpanne/ObjectName";
       description = "Explicitly handled object names";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "OneTuple" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "OneTuple";
       version = "0.2.2";
       sha256 = "1p14cvjk3rgfc0xxcn7ffaajd2ii1ljnlayil2yyzgdwhlj70bnq";
       libraryHaskellDepends = [ base ];
       description = "Singleton Tuple";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Only" = callPackage
    ({ mkDerivation, base, deepseq }:
     mkDerivation {
       pname = "Only";
       version = "0.1";
       sha256 = "0rdj3a629fk2vp121jq8mf2smkblrz5w3cxhlsyx6my2x29s2ymb";
       revision = "1";
       editedCabalFile = "1ahk7p34kmh041mz7lyc10nhcxgv2i4z8nvzxvqm2x34gslmsbzr";
       libraryHaskellDepends = [ base deepseq ];
       description = "The 1-tuple type or single-value \"collection\"";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "OpenAL" = callPackage
    ({ mkDerivation, base, ObjectName, openal, OpenGL, StateVar
     , transformers
     }:
     mkDerivation {
       pname = "OpenAL";
       version = "1.7.0.4";
       sha256 = "067in6qb2i0xwy6bnkxfhzbn7gq88cf03p8421al6y23zv2gd29r";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base ObjectName OpenGL StateVar transformers
       ];
       librarySystemDepends = [ openal ];
       homepage = "https://github.com/haskell-openal/ALUT";
       description = "A binding to the OpenAL cross-platform 3D audio API";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) openal;};
  "OpenGL" = callPackage
    ({ mkDerivation, base, bytestring, containers, GLURaw, ObjectName
     , OpenGLRaw, StateVar, text, transformers
     }:
     mkDerivation {
       pname = "OpenGL";
       version = "3.0.2.2";
       sha256 = "19vxwvx2n8zq2klj176l25n2b64ybp0b8mhm4p46gvpcivz41fjc";
       libraryHaskellDepends = [
         base bytestring containers GLURaw ObjectName OpenGLRaw StateVar
         text transformers
       ];
       homepage = "http://www.haskell.org/haskellwiki/Opengl";
       description = "A binding for the OpenGL graphics system";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "OpenGLRaw" = callPackage
    ({ mkDerivation, base, bytestring, containers, fixed, half, libGL
     , text, transformers
     }:
     mkDerivation {
       pname = "OpenGLRaw";
       version = "3.3.1.0";
       sha256 = "1x8w3x308jldj2c1xqcq3a3sc2jc06pdpgqkgjsmixi1skv4a1vb";
       libraryHaskellDepends = [
         base bytestring containers fixed half text transformers
       ];
       librarySystemDepends = [ libGL ];
       homepage = "http://www.haskell.org/haskellwiki/Opengl";
       description = "A raw binding for the OpenGL graphics system";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) libGL;};
  "ParsecTools" = callPackage
    ({ mkDerivation, base, parsec }:
     mkDerivation {
       pname = "ParsecTools";
       version = "0.0.2.0";
       sha256 = "11vshnbxfl8p38aix4h2b0vms8j58agwxbmhd9pkxai764sl6j7g";
       libraryHaskellDepends = [ base parsec ];
       description = "Parsec combinators for more complex objects";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "QuasiText" = callPackage
    ({ mkDerivation, attoparsec, base, haskell-src-meta
     , template-haskell, text, th-lift-instances
     }:
     mkDerivation {
       pname = "QuasiText";
       version = "0.1.2.6";
       sha256 = "06giw0q5lynx05c4h45zwnlcifg91w291h3gwrg68qsjw9lx40g8";
       libraryHaskellDepends = [
         attoparsec base haskell-src-meta template-haskell text
         th-lift-instances
       ];
       homepage = "https://github.com/mikeplus64/QuasiText";
       description = "A QuasiQuoter for Text";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "QuickCheck" = callPackage
    ({ mkDerivation, base, containers, deepseq, random
     , template-haskell, tf-random, transformers
     }:
     mkDerivation {
       pname = "QuickCheck";
       version = "2.11.3";
       sha256 = "0xhqk35fkzlbjcqbabg6962jkv8d688nzmz7ng4bm84x2d95d328";
       libraryHaskellDepends = [
         base containers deepseq random template-haskell tf-random
         transformers
       ];
       testHaskellDepends = [ base ];
       homepage = "https://github.com/nick8325/quickcheck";
       description = "Automatic testing of Haskell programs";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "RSA" = callPackage
    ({ mkDerivation, base, binary, bytestring, crypto-api
     , crypto-pubkey-types, DRBG, QuickCheck, SHA, tagged
     , test-framework, test-framework-quickcheck2
     }:
     mkDerivation {
       pname = "RSA";
       version = "2.3.0";
       sha256 = "0csk933gb2ayijxx6ar110lmsbvgyn7p5bqln3g2qbfxz73nvrzf";
       libraryHaskellDepends = [
         base binary bytestring crypto-api crypto-pubkey-types SHA
       ];
       testHaskellDepends = [
         base binary bytestring crypto-api crypto-pubkey-types DRBG
         QuickCheck SHA tagged test-framework test-framework-quickcheck2
       ];
       description = "Implementation of RSA, using the padding schemes of PKCS#1 v2.1.";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Rasterific" = callPackage
    ({ mkDerivation, base, bytestring, containers, dlist, FontyFruity
     , free, JuicyPixels, mtl, primitive, transformers, vector
     , vector-algorithms
     }:
     mkDerivation {
       pname = "Rasterific";
       version = "0.7.4";
       sha256 = "13f5ay9wmva9k15a6pk4imxz6rj80gwc1f16906m7a6rm9vgwvlq";
       libraryHaskellDepends = [
         base bytestring containers dlist FontyFruity free JuicyPixels mtl
         primitive transformers vector vector-algorithms
       ];
       description = "A pure haskell drawing engine";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "RefSerialize" = callPackage
    ({ mkDerivation, base, binary, bytestring, containers, hashtables
     , stringsearch
     }:
     mkDerivation {
       pname = "RefSerialize";
       version = "0.4.0";
       sha256 = "1cmvab3yakazhgij3x8s871r9wf8ixkwmb52k88rcgclmfqmxch5";
       libraryHaskellDepends = [
         base binary bytestring containers hashtables stringsearch
       ];
       description = "Write to and read from ByteStrings maintaining internal memory references";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "SCalendar" = callPackage
    ({ mkDerivation, base, containers, hspec, QuickCheck, scalendar
     , text, time
     }:
     mkDerivation {
       pname = "SCalendar";
       version = "1.1.0";
       sha256 = "139lggc8f7sw703asdyxqbja0jfcgphx0l5si1046lsryinvywa9";
       libraryHaskellDepends = [ base containers text time ];
       testHaskellDepends = [
         base containers hspec QuickCheck scalendar text time
       ];
       homepage = "https://www.researchgate.net/publication/311582722_Method_of_Managing_Resources_in_a_Telecommunication_Network_or_a_Computing_System";
       description = "This is a library for handling calendars and resource availability based on the \"top-nodes algorithm\" and set operations";
       license = stdenv.lib.licenses.mit;
     }) {};
  "SHA" = callPackage
    ({ mkDerivation, array, base, binary, bytestring, QuickCheck
     , test-framework, test-framework-quickcheck2
     }:
     mkDerivation {
       pname = "SHA";
       version = "1.6.4.4";
       sha256 = "0i4b2wjisivdy72synal711ywhx05mfqfba5n65rk8qidggm1nbb";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ array base binary bytestring ];
       testHaskellDepends = [
         array base binary bytestring QuickCheck test-framework
         test-framework-quickcheck2
       ];
       description = "Implementations of the SHA suite of message digest functions";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "STMonadTrans" = callPackage
    ({ mkDerivation, array, base, Cabal, mtl }:
     mkDerivation {
       pname = "STMonadTrans";
       version = "0.4.3";
       sha256 = "1nr26fnmi5fdjc6d00w13kjhmfyvb5b837d0006w4dj0yxndaksp";
       revision = "1";
       editedCabalFile = "09kqrv9a4yhsdpix49h9qjw0j2fhxrgkjnfrnyxg1nspmqrvl50m";
       libraryHaskellDepends = [ array base mtl ];
       testHaskellDepends = [ array base Cabal mtl ];
       description = "A monad transformer version of the ST monad";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "SVGFonts" = callPackage
    ({ mkDerivation, attoparsec, base, blaze-markup, blaze-svg
     , bytestring, cereal, cereal-vector, containers, data-default-class
     , diagrams-core, diagrams-lib, directory, parsec, split, text
     , vector, xml
     }:
     mkDerivation {
       pname = "SVGFonts";
       version = "1.7";
       sha256 = "1k9ili7l9pp5a009jh55vigb917wdnsl6iaz0ggp6d4nw1jwsg6s";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [
         attoparsec base blaze-markup blaze-svg bytestring cereal
         cereal-vector containers data-default-class diagrams-core
         diagrams-lib directory parsec split text vector xml
       ];
       description = "Fonts from the SVG-Font format";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "SafeSemaphore" = callPackage
    ({ mkDerivation, base, containers, HUnit, stm }:
     mkDerivation {
       pname = "SafeSemaphore";
       version = "0.10.1";
       sha256 = "0rpg9j6fy70i0b9dkrip9d6wim0nac0snp7qzbhykjkqlcvvgr91";
       revision = "1";
       editedCabalFile = "1k61gqgfh6n3sj8ni8sfvpcm39nqc2msjfxk2pgmhfabvv48w5hv";
       libraryHaskellDepends = [ base containers stm ];
       testHaskellDepends = [ base HUnit ];
       homepage = "https://github.com/ChrisKuklewicz/SafeSemaphore";
       description = "Much safer replacement for QSemN, QSem, and SampleVar";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "SegmentTree" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "SegmentTree";
       version = "0.3";
       sha256 = "1hagm0y9x2j1wcgk5ibxnlh2slnxfggn79cq20ws0zvd4yqw3231";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base ];
       description = "Data structure for querying the set (or count) of intervals covering given point";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ShellCheck" = callPackage
    ({ mkDerivation, aeson, base, bytestring, Cabal, containers
     , directory, mtl, parsec, process, QuickCheck, regex-tdfa
     }:
     mkDerivation {
       pname = "ShellCheck";
       version = "0.5.0";
       sha256 = "0z1hscbr11hwkq8k1v0vaa947hb9m6k4cm831jk1gpj8dxrk151b";
       isLibrary = true;
       isExecutable = true;
       setupHaskellDepends = [ base Cabal process ];
       libraryHaskellDepends = [
         aeson base bytestring containers directory mtl parsec process
         QuickCheck regex-tdfa
       ];
       executableHaskellDepends = [
         aeson base bytestring containers directory mtl parsec QuickCheck
         regex-tdfa
       ];
       testHaskellDepends = [
         aeson base bytestring containers directory mtl parsec QuickCheck
         regex-tdfa
       ];
       homepage = "https://www.shellcheck.net/";
       description = "Shell script analysis tool";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "Spintax" = callPackage
    ({ mkDerivation, attoparsec, base, extra, mtl, mwc-random, text }:
     mkDerivation {
       pname = "Spintax";
       version = "0.3.3";
       sha256 = "04vb07r26p4rxgsym5zhqsnyx4sr2a112sa31mdda5hjpy9j3pr1";
       libraryHaskellDepends = [
         attoparsec base extra mtl mwc-random text
       ];
       homepage = "https://github.com/MichelBoucey/spintax";
       description = "Random text generation based on spintax";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "StateVar" = callPackage
    ({ mkDerivation, base, stm, transformers }:
     mkDerivation {
       pname = "StateVar";
       version = "1.1.1.1";
       sha256 = "08r2iw0gdmfs4f6wraaq19vfmkjdbics3dbhw39y7mdjd98kcr7b";
       libraryHaskellDepends = [ base stm transformers ];
       homepage = "https://github.com/haskell-opengl/StateVar";
       description = "State variables";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "Strafunski-StrategyLib" = callPackage
    ({ mkDerivation, base, directory, mtl, syb, transformers }:
     mkDerivation {
       pname = "Strafunski-StrategyLib";
       version = "5.0.1.0";
       sha256 = "15d2m7ahb3jwriariaff0yz93mmrhpv579wink9838w9091cf650";
       libraryHaskellDepends = [ base directory mtl syb transformers ];
       description = "Library for strategic programming";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "TCache" = callPackage
    ({ mkDerivation, base, bytestring, containers, directory
     , hashtables, mtl, old-time, RefSerialize, stm, text
     }:
     mkDerivation {
       pname = "TCache";
       version = "0.12.1";
       sha256 = "1gdp78v359jf9hzwdkips7z99s9lvi21vw0l88dgl9yirmgv8d7i";
       libraryHaskellDepends = [
         base bytestring containers directory hashtables mtl old-time
         RefSerialize stm text
       ];
       description = "A Transactional cache with user-defined persistence";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ViennaRNAParser" = callPackage
    ({ mkDerivation, base, hspec, parsec, ParsecTools, process
     , transformers
     }:
     mkDerivation {
       pname = "ViennaRNAParser";
       version = "1.3.3";
       sha256 = "1zmfzdp28g9mz99yp2kv98g745a2p4cls4553izcbc5q0v8l3sby";
       libraryHaskellDepends = [
         base parsec ParsecTools process transformers
       ];
       testHaskellDepends = [ base hspec parsec ];
       description = "Libary for parsing ViennaRNA package output";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "Win32-notify" = callPackage
    ({ mkDerivation, base, containers, directory, Win32 }:
     mkDerivation {
       pname = "Win32-notify";
       version = "0.3.0.3";
       sha256 = "05j10i83354cqbi8yzq5rgkkd6rmxsvy1b0sbwz3pkmidkhdn88c";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base containers directory Win32 ];
       description = "A binding to part of the Win32 library for file notification";
       license = stdenv.lib.licenses.bsd3;
       hydraPlatforms = stdenv.lib.platforms.none;
     }) {Win32 = null;};
  "X11" = callPackage
    ({ mkDerivation, base, data-default, libX11, libXext, libXinerama
     , libXrandr, libXrender, libXScrnSaver
     }:
     mkDerivation {
       pname = "X11";
       version = "1.9";
       sha256 = "1f8dy6ckkyvpcv7zlniyv01cqjb9lgqscm8pml58cvwc7n38w4qh";
       libraryHaskellDepends = [ base data-default ];
       librarySystemDepends = [
         libX11 libXext libXinerama libXrandr libXrender libXScrnSaver
       ];
       homepage = "https://github.com/xmonad/X11";
       description = "A binding to the X11 graphics library";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs.xorg) libX11; inherit (pkgs.xorg) libXScrnSaver;
         inherit (pkgs.xorg) libXext; inherit (pkgs.xorg) libXinerama;
         inherit (pkgs.xorg) libXrandr; inherit (pkgs.xorg) libXrender;};
  "X11-xft" = callPackage
    ({ mkDerivation, base, libXft, utf8-string, X11 }:
     mkDerivation {
       pname = "X11-xft";
       version = "0.3.1";
       sha256 = "1lgqb0s2qfwwgbvwxhjbi23rbwamzdi0l0slfr20c3jpcbp3zfjf";
       libraryHaskellDepends = [ base utf8-string X11 ];
       libraryPkgconfigDepends = [ libXft ];
       description = "Bindings to the Xft, X Free Type interface library, and some Xrender parts";
       license = "LGPL";
     }) {inherit (pkgs.xorg) libXft;};
  "Xauth" = callPackage
    ({ mkDerivation, base, libXau }:
     mkDerivation {
       pname = "Xauth";
       version = "0.1";
       sha256 = "1mvflp6y1nz9961gngbwk0b7wr8sx3p6296jfvvb6ln1kvm2scxs";
       libraryHaskellDepends = [ base ];
       libraryPkgconfigDepends = [ libXau ];
       description = "A binding to the X11 authentication library";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs.xorg) libXau;};
  "abstract-deque" = callPackage
    ({ mkDerivation, array, base, containers, random, time }:
     mkDerivation {
       pname = "abstract-deque";
       version = "0.3";
       sha256 = "18jwswjxwzc9bjiy4ds6hw2a74ki797jmfcifxd2ga4kh7ri1ah9";
       libraryHaskellDepends = [ array base containers random time ];
       homepage = "https://github.com/rrnewton/haskell-lockfree/wiki";
       description = "Abstract, parameterized interface to mutable Deques";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "abstract-deque-tests" = callPackage
    ({ mkDerivation, abstract-deque, array, base, containers, HUnit
     , random, test-framework, test-framework-hunit, time
     }:
     mkDerivation {
       pname = "abstract-deque-tests";
       version = "0.3";
       sha256 = "19gb5x5z3nvazdra3skm24c2g2byj0i4cjbzfwfghnb5q96gn5sz";
       libraryHaskellDepends = [
         abstract-deque array base containers HUnit random test-framework
         test-framework-hunit time
       ];
       testHaskellDepends = [
         abstract-deque array base containers HUnit random test-framework
         test-framework-hunit time
       ];
       homepage = "https://github.com/rrnewton/haskell-lockfree/wiki";
       description = "A test-suite for any queue or double-ended queue satisfying an interface";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "abstract-par" = callPackage
    ({ mkDerivation, base, deepseq }:
     mkDerivation {
       pname = "abstract-par";
       version = "0.3.3";
       sha256 = "0q6qsniw4wks2pw6wzncb1p1j3k6al5njnvm2v5n494hplwqg2i4";
       libraryHaskellDepends = [ base deepseq ];
       homepage = "https://github.com/simonmar/monad-par";
       description = "Type classes generalizing the functionality of the 'monad-par' library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "accuerr" = callPackage
    ({ mkDerivation, base, bifunctors, lens, semigroups }:
     mkDerivation {
       pname = "accuerr";
       version = "0.2.0.2";
       sha256 = "0dlszai5bz05algxm98kjhnjwa7mwj620d52vrsc4fxds8q84sjg";
       libraryHaskellDepends = [ base bifunctors lens semigroups ];
       homepage = "http://www.github.com/massysett/accuerr";
       description = "Data type like Either but with accumulating error type";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ace" = callPackage
    ({ mkDerivation, attoparsec, base, bifunctors, blaze-html
     , blaze-markup, data-default, hspec, HUnit, mtl, parsec, text
     }:
     mkDerivation {
       pname = "ace";
       version = "0.6";
       sha256 = "0f07j2rj9ylvdrijwwlpx66mj503mhjfq1x2mylpxkr6kmjjniyk";
       libraryHaskellDepends = [
         attoparsec base blaze-html blaze-markup data-default parsec text
       ];
       testHaskellDepends = [
         base bifunctors hspec HUnit mtl parsec text
       ];
       description = "Attempto Controlled English parser and printer";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "action-permutations" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "action-permutations";
       version = "0.0.0.1";
       sha256 = "0rhlzpwshixpnqma7sk28f22dkwz39b6lcwnzmd31rcnz5cyw6d4";
       libraryHaskellDepends = [ base ];
       description = "Execute a set of actions (e.g. parsers) in each possible order";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "active" = callPackage
    ({ mkDerivation, base, lens, linear, QuickCheck, semigroupoids
     , semigroups, vector
     }:
     mkDerivation {
       pname = "active";
       version = "0.2.0.13";
       sha256 = "1yw029rh0gb63bhwwjynbv173mny14is4cyjkrlvzvxwb0fi96jx";
       revision = "6";
       editedCabalFile = "0zq9j2hgapb9blvmd9y8kmczizw4a18kksnfqd1py1jzx7hr46n3";
       libraryHaskellDepends = [
         base lens linear semigroupoids semigroups vector
       ];
       testHaskellDepends = [
         base lens linear QuickCheck semigroupoids semigroups vector
       ];
       description = "Abstractions for animation";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ad" = callPackage
    ({ mkDerivation, array, base, Cabal, cabal-doctest, comonad
     , containers, criterion, data-reify, directory, doctest, erf
     , filepath, free, nats, reflection, semigroups, transformers
     }:
     mkDerivation {
       pname = "ad";
       version = "4.3.5";
       sha256 = "0q4dvi02k21jq8xf0ywgmcs5mph4hpx5s3y3pj839y0g3x5paplw";
       revision = "5";
       editedCabalFile = "0yzyfqhsafzaqzj8wmjrj5ghm6jwbxya3wxc9sjl59j9q20jc4nq";
       setupHaskellDepends = [ base Cabal cabal-doctest ];
       libraryHaskellDepends = [
         array base comonad containers data-reify erf free nats reflection
         semigroups transformers
       ];
       testHaskellDepends = [ base directory doctest filepath ];
       benchmarkHaskellDepends = [ base criterion erf ];
       homepage = "http://github.com/ekmett/ad";
       description = "Automatic Differentiation";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "adjunctions" = callPackage
    ({ mkDerivation, array, base, comonad, containers, contravariant
     , distributive, free, generic-deriving, hspec, hspec-discover, mtl
     , profunctors, semigroupoids, semigroups, tagged, transformers
     , transformers-compat, void
     }:
     mkDerivation {
       pname = "adjunctions";
       version = "4.4";
       sha256 = "1sbal7cbhm12crfnfhkk322jnzgx7lhw3jzq0p463bipagsjwz2h";
       revision = "1";
       editedCabalFile = "0582nnn3fab63nd7ng8smk2c8j7pciiyzfj1na34wqid2hs675as";
       libraryHaskellDepends = [
         array base comonad containers contravariant distributive free mtl
         profunctors semigroupoids semigroups tagged transformers
         transformers-compat void
       ];
       testHaskellDepends = [ base distributive generic-deriving hspec ];
       testToolDepends = [ hspec-discover ];
       homepage = "http://github.com/ekmett/adjunctions/";
       description = "Adjunctions and representable functors";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "adler32" = callPackage
    ({ mkDerivation, base, bytestring, hspec, zlib }:
     mkDerivation {
       pname = "adler32";
       version = "0.1.2.0";
       sha256 = "1936b05mx842wm8swz3g3jv6m9absa04islq4rwysicz72gkrd16";
       libraryHaskellDepends = [ base bytestring ];
       librarySystemDepends = [ zlib ];
       testHaskellDepends = [ base bytestring hspec ];
       homepage = "https://github.com/redneb/hs-adler32";
       description = "An implementation of Adler-32, supporting rolling checksum operation";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) zlib;};
  "aern2-mp" = callPackage
    ({ mkDerivation, base, convertible, hmpfr, hspec, integer-gmp
     , integer-logarithms, lens, mixed-types-num, QuickCheck, regex-tdfa
     , template-haskell
     }:
     mkDerivation {
       pname = "aern2-mp";
       version = "0.1.2.0";
       sha256 = "131wymnajhji593zydnyddyc6cwg0y3nqgvibq8l9h23v4m67rlx";
       revision = "1";
       editedCabalFile = "09b92kf60m4v0xn2nm9h8wkg8wr7dc1na5c9mg2lk3kplf60sfvk";
       libraryHaskellDepends = [
         base convertible hmpfr hspec integer-gmp integer-logarithms lens
         mixed-types-num QuickCheck regex-tdfa template-haskell
       ];
       testHaskellDepends = [ base hspec QuickCheck ];
       homepage = "https://github.com/michalkonecny/aern2";
       description = "Multi-precision floats via MPFR";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aern2-real" = callPackage
    ({ mkDerivation, aern2-mp, aeson, base, bytestring, containers
     , convertible, hspec, lens, mixed-types-num, QuickCheck, random
     , stm, transformers
     }:
     mkDerivation {
       pname = "aern2-real";
       version = "0.1.1.0";
       sha256 = "1sq2s20vwhm0avdzqg2vb5ck6rj7aw16kcfkdyhda0dl6s2l5q15";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         aern2-mp aeson base bytestring containers convertible hspec lens
         mixed-types-num QuickCheck stm transformers
       ];
       executableHaskellDepends = [
         aern2-mp base mixed-types-num QuickCheck random
       ];
       testHaskellDepends = [ base hspec QuickCheck ];
       homepage = "https://github.com/michalkonecny/aern2";
       description = "Exact real numbers via Cauchy sequences and MPFR";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson" = callPackage
    ({ mkDerivation, attoparsec, base, base-compat, bytestring
     , containers, deepseq, dlist, ghc-prim, hashable, scientific
     , tagged, template-haskell, text, th-abstraction, time
     , time-locale-compat, unordered-containers, uuid-types, vector
     }:
     mkDerivation {
       pname = "aeson";
       version = "1.3.1.1";
       sha256 = "1i1ig840fvsb1lnklcv32zsc0zscirc301lw1mpfxhc6h4pk0gw4";
       libraryHaskellDepends = [
         attoparsec base base-compat bytestring containers deepseq dlist
         ghc-prim hashable scientific tagged template-haskell text
         th-abstraction time time-locale-compat unordered-containers
         uuid-types vector
       ];
       doCheck = false;
       homepage = "https://github.com/bos/aeson";
       description = "Fast JSON parsing and encoding";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-attoparsec" = callPackage
    ({ mkDerivation, aeson, attoparsec, base }:
     mkDerivation {
       pname = "aeson-attoparsec";
       version = "0.0.0";
       sha256 = "0111qzp381jjhv1iymjg8mr3jslx5x1ll3w2dq4b6f3r8y8871m5";
       libraryHaskellDepends = [ aeson attoparsec base ];
       testHaskellDepends = [ base ];
       homepage = "https://github.com/athanclark/aeson-attoparsec#readme";
       description = "Embed an Attoparsec text parser into an Aeson parser";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-better-errors" = callPackage
    ({ mkDerivation, aeson, base, bytestring, dlist, mtl, scientific
     , text, transformers, transformers-compat, unordered-containers
     , vector, void
     }:
     mkDerivation {
       pname = "aeson-better-errors";
       version = "0.9.1.0";
       sha256 = "09vkyrhwak3bmpfsqcd2az8hfqqkxyhg468hv5avgisy0nzh3w38";
       libraryHaskellDepends = [
         aeson base bytestring dlist mtl scientific text transformers
         transformers-compat unordered-containers vector void
       ];
       homepage = "https://github.com/hdgarrood/aeson-better-errors";
       description = "Better error messages when decoding JSON values";
       license = stdenv.lib.licenses.mit;
     }) {};
  "aeson-casing" = callPackage
    ({ mkDerivation, aeson, base, tasty, tasty-hunit, tasty-quickcheck
     , tasty-th
     }:
     mkDerivation {
       pname = "aeson-casing";
       version = "0.1.0.5";
       sha256 = "0xq587sqn68gnx1np035wl5j1341v19h26d7b1c06bw2qqymdv6g";
       libraryHaskellDepends = [ aeson base ];
       testHaskellDepends = [
         aeson base tasty tasty-hunit tasty-quickcheck tasty-th
       ];
       description = "Tools to change the formatting of field names in Aeson instances";
       license = stdenv.lib.licenses.mit;
     }) {};
  "aeson-compat" = callPackage
    ({ mkDerivation, aeson, attoparsec, attoparsec-iso8601, base
     , base-compat, bytestring, containers, exceptions, hashable
     , scientific, tagged, text, time, time-locale-compat
     , unordered-containers, vector
     }:
     mkDerivation {
       pname = "aeson-compat";
       version = "0.3.8";
       sha256 = "0j4v13pgk21zy8hqkbx8hw0n05jdl17qphxz9rj4h333pr547r3i";
       revision = "1";
       editedCabalFile = "0ayf5hkhl63lmlxpl7w5zvnz0lvpxb2rwmf0wbslff0y2s449mbf";
       libraryHaskellDepends = [
         aeson attoparsec attoparsec-iso8601 base base-compat bytestring
         containers exceptions hashable scientific tagged text time
         time-locale-compat unordered-containers vector
       ];
       doCheck = false;
       homepage = "https://github.com/phadej/aeson-compat#readme";
       description = "Compatibility layer for aeson";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-diff" = callPackage
    ({ mkDerivation, aeson, base, bytestring, directory, doctest
     , edit-distance-vector, filepath, Glob, hashable, mtl
     , optparse-applicative, QuickCheck, quickcheck-instances
     , scientific, text, unordered-containers, vector
     }:
     mkDerivation {
       pname = "aeson-diff";
       version = "1.1.0.5";
       sha256 = "1kzvqzbl6pp5g49dp4qqc7cbisnkpqz0i18b6nmdb7f1nrhdvnb1";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         aeson base bytestring edit-distance-vector hashable mtl scientific
         text unordered-containers vector
       ];
       executableHaskellDepends = [
         aeson base bytestring optparse-applicative text
       ];
       testHaskellDepends = [
         aeson base bytestring directory doctest filepath Glob QuickCheck
         quickcheck-instances text unordered-containers vector
       ];
       homepage = "https://github.com/thsutton/aeson-diff";
       description = "Extract and apply patches to JSON documents";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-extra" = callPackage
    ({ mkDerivation, aeson, aeson-compat, attoparsec
     , attoparsec-iso8601, base, base-compat-batteries, bytestring
     , containers, deepseq, exceptions, hashable, parsec
     , recursion-schemes, scientific, template-haskell, text, these
     , time, unordered-containers, vector
     }:
     mkDerivation {
       pname = "aeson-extra";
       version = "0.4.1.1";
       sha256 = "1y7xss382hdxrv4jzprsm3b7ij7wiw8jgjg9wp49dx6bfvcnb2nl";
       revision = "1";
       editedCabalFile = "14blp4jmcd81ipxany6q7x706xj8fhy019a73c391n767r1nwpq1";
       libraryHaskellDepends = [
         aeson aeson-compat attoparsec attoparsec-iso8601 base
         base-compat-batteries bytestring containers deepseq exceptions
         hashable parsec recursion-schemes scientific template-haskell text
         these time unordered-containers vector
       ];
       doCheck = false;
       homepage = "https://github.com/phadej/aeson-extra#readme";
       description = "Extra goodies for aeson";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-generic-compat" = callPackage
    ({ mkDerivation, aeson, base }:
     mkDerivation {
       pname = "aeson-generic-compat";
       version = "0.0.1.3";
       sha256 = "1kr3waa46k3619yvif0zh4lx7s0zhyghlr1c5kkrvg432i8wmdm6";
       libraryHaskellDepends = [ aeson base ];
       description = "Compatible generic class names of Aeson";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-iproute" = callPackage
    ({ mkDerivation, aeson, base, doctest, iproute, text
     , unordered-containers
     }:
     mkDerivation {
       pname = "aeson-iproute";
       version = "0.2";
       sha256 = "13r6vyyw1pbk5sz32ari5kig23vsg57a5pir037adi7xicrm6kgf";
       libraryHaskellDepends = [
         aeson base iproute text unordered-containers
       ];
       testHaskellDepends = [ base doctest ];
       homepage = "https://github.com/greydot/aeson-iproute";
       description = "Aeson instances for iproute types";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-picker" = callPackage
    ({ mkDerivation, aeson, base, hspec, lens, lens-aeson, text }:
     mkDerivation {
       pname = "aeson-picker";
       version = "0.1.0.4";
       sha256 = "0ln4qwx7app1sc01irmy5lx7bqsq6wsgdig6zihpnp9rbj8263mj";
       libraryHaskellDepends = [ aeson base lens lens-aeson text ];
       testHaskellDepends = [ base hspec text ];
       homepage = "https://github.com/ozzzzz/aeson-picker#readme";
       description = "Tiny library to get fields from JSON format";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-pretty" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, base-compat, bytestring
     , cmdargs, scientific, text, unordered-containers, vector
     }:
     mkDerivation {
       pname = "aeson-pretty";
       version = "0.8.7";
       sha256 = "1m977gs0s9gf3lwzlbs5y7bl6ansc5pywmn2qjk09l5bwg2yrhf1";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         aeson base base-compat bytestring scientific text
         unordered-containers vector
       ];
       executableHaskellDepends = [
         aeson attoparsec base bytestring cmdargs
       ];
       homepage = "http://github.com/informatikr/aeson-pretty";
       description = "JSON pretty-printing library and command-line tool";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-qq" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, base-compat, ghc-prim
     , haskell-src-meta, hspec, parsec, scientific, template-haskell
     , text, vector
     }:
     mkDerivation {
       pname = "aeson-qq";
       version = "0.8.2";
       sha256 = "0ln13jqyfh5726hdrk1rad9a6cgrrj201plmwcfcpvq18v4m5ckd";
       libraryHaskellDepends = [
         aeson attoparsec base base-compat haskell-src-meta parsec
         scientific template-haskell text vector
       ];
       testHaskellDepends = [
         aeson attoparsec base base-compat ghc-prim haskell-src-meta hspec
         parsec scientific template-haskell text vector
       ];
       homepage = "https://github.com/sol/aeson-qq#readme";
       description = "JSON quasiquoter for Haskell";
       license = stdenv.lib.licenses.mit;
     }) {};
  "aeson-typescript" = callPackage
    ({ mkDerivation, aeson, base, bytestring, containers, directory
     , filepath, hspec, interpolate, mtl, process, template-haskell
     , temporary, text, th-abstraction, unordered-containers
     }:
     mkDerivation {
       pname = "aeson-typescript";
       version = "0.1.1.0";
       sha256 = "0sx4gavp0pvnxlxwix1di34vm2bfi5d02mzgzs402grqhh1v38vp";
       libraryHaskellDepends = [
         aeson base containers interpolate mtl template-haskell text
         th-abstraction unordered-containers
       ];
       testHaskellDepends = [
         aeson base bytestring containers directory filepath hspec
         interpolate mtl process template-haskell temporary text
         th-abstraction unordered-containers
       ];
       homepage = "https://github.com/codedownio/aeson-typescript#readme";
       description = "Generate TypeScript definition files from your ADTs";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-utils" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, bytestring, scientific
     , text
     }:
     mkDerivation {
       pname = "aeson-utils";
       version = "0.3.0.2";
       sha256 = "07sbvmm158yqmw4hri9l66ag4r6l59x230gbjm9r97w4x0dlp0bi";
       revision = "7";
       editedCabalFile = "0lnlmsn5imbapdhbza1175wm04ynn1w75llkhlk1akpanx1dnd15";
       libraryHaskellDepends = [
         aeson attoparsec base bytestring scientific text
       ];
       description = "Utilities for working with Aeson";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "aeson-yak" = callPackage
    ({ mkDerivation, aeson, base }:
     mkDerivation {
       pname = "aeson-yak";
       version = "0.1.1.3";
       sha256 = "0x5a5z0bmiljl9rfapyq6srffp6v3g25qvy0x692a5as66y5ahxg";
       libraryHaskellDepends = [ aeson base ];
       homepage = "https://github.com/tejon/aeson-yak";
       description = "Handle JSON that may or may not be a list, or exist";
       license = stdenv.lib.licenses.mit;
     }) {};
  "al" = callPackage
    ({ mkDerivation, base, c2hs, mtl, openal }:
     mkDerivation {
       pname = "al";
       version = "0.1.4.2";
       sha256 = "1lpcdh2dak1r9lwd6irjs8p56p1fjphq58ixwjwbg9syl2rz7w4b";
       libraryHaskellDepends = [ base mtl ];
       libraryPkgconfigDepends = [ openal ];
       libraryToolDepends = [ c2hs ];
       homepage = "http://github.com/phaazon/al";
       description = "OpenAL 1.1 raw API.";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) openal;};
  "alarmclock" = callPackage
    ({ mkDerivation, async, base, clock, hspec, stm, time
     , unbounded-delays
     }:
     mkDerivation {
       pname = "alarmclock";
       version = "0.5.0.2";
       sha256 = "0k6nfgxbhnsdlxiv1d6q7kgfmfnix8d1z9cpp84kz9m9jw4a6x15";
       libraryHaskellDepends = [
         async base clock stm time unbounded-delays
       ];
       testHaskellDepends = [
         async base clock hspec stm time unbounded-delays
       ];
       homepage = "https://bitbucket.org/davecturner/alarmclock";
       description = "Wake up and perform an action at a certain time";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "alerts" = callPackage
    ({ mkDerivation, base, blaze-html, text }:
     mkDerivation {
       pname = "alerts";
       version = "0.1.0.0";
       sha256 = "0s6af3267qfg18zsy0fb43hfwf3dym2zpr864n05xwgzmg9qwhaj";
       libraryHaskellDepends = [ base blaze-html text ];
       homepage = "https://github.com/alx741/alerts#readme";
       description = "Alert messages for web applications";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "alex" = callPackage
    ({ mkDerivation, array, base, containers, directory, happy, process
     }:
     mkDerivation {
       pname = "alex";
       version = "3.2.4";
       sha256 = "0cpjixgsr0b2x4s6hz4aa6gnmjw9i7xd9nlfi8m37zqlidq4v3nm";
       isLibrary = false;
       isExecutable = true;
       enableSeparateDataOutput = true;
       executableHaskellDepends = [ array base containers directory ];
       executableToolDepends = [ happy ];
       testHaskellDepends = [ base process ];
       doHaddock = false;
       homepage = "http://www.haskell.org/alex/";
       description = "Alex is a tool for generating lexical analysers in Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "alg" = callPackage
    ({ mkDerivation, base, util }:
     mkDerivation {
       pname = "alg";
       version = "0.2.6.0";
       sha256 = "0y0qhhmyjzd8sf6v74066yx41nl1zsnsmk8scjvdym8j8k8mvrpk";
       libraryHaskellDepends = [ base util ];
       description = "Algebraic structures";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "algebra" = callPackage
    ({ mkDerivation, adjunctions, array, base, containers, distributive
     , mtl, nats, semigroupoids, semigroups, tagged, transformers, void
     }:
     mkDerivation {
       pname = "algebra";
       version = "4.3.1";
       sha256 = "090jaipyx5pcav2wqcqzds51fwx49l4c9cpp9nnk16bgkf92z615";
       libraryHaskellDepends = [
         adjunctions array base containers distributive mtl nats
         semigroupoids semigroups tagged transformers void
       ];
       homepage = "http://github.com/ekmett/algebra/";
       description = "Constructive abstract algebra";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "almost-fix" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "almost-fix";
       version = "0.0.2";
       sha256 = "03x715jcrsxfs2d08hsg3y5f6a4bnlzfxsmhzimvpdp9bw0psn90";
       libraryHaskellDepends = [ base ];
       description = "Recurse while a predicate is satisfied";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "alsa-core" = callPackage
    ({ mkDerivation, alsaLib, base, extensible-exceptions }:
     mkDerivation {
       pname = "alsa-core";
       version = "0.5.0.1";
       sha256 = "1avh4a419h9d2zsslg6j8hm87ppgsgqafz8ll037rk2yy1g4jl7b";
       libraryHaskellDepends = [ base extensible-exceptions ];
       libraryPkgconfigDepends = [ alsaLib ];
       homepage = "http://www.haskell.org/haskellwiki/ALSA";
       description = "Binding to the ALSA Library API (Exceptions)";
       license = stdenv.lib.licenses.bsd3;
       platforms = [ "i686-linux" "x86_64-linux" ];
     }) {inherit (pkgs) alsaLib;};
  "alsa-pcm" = callPackage
    ({ mkDerivation, alsa-core, alsaLib, array, base
     , extensible-exceptions, sample-frame, semigroups, storable-record
     }:
     mkDerivation {
       pname = "alsa-pcm";
       version = "0.6.1.1";
       sha256 = "1mllr9nbm3qb837zgvd6mrpr6f8i272wflv0a45rrpsq50zgcj33";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         alsa-core array base extensible-exceptions sample-frame semigroups
         storable-record
       ];
       libraryPkgconfigDepends = [ alsaLib ];
       homepage = "http://www.haskell.org/haskellwiki/ALSA";
       description = "Binding to the ALSA Library API (PCM audio)";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) alsaLib;};
  "alsa-seq" = callPackage
    ({ mkDerivation, alsa-core, alsaLib, array, base, bytestring
     , data-accessor, enumset, extensible-exceptions, poll, transformers
     , utility-ht
     }:
     mkDerivation {
       pname = "alsa-seq";
       version = "0.6.0.7";
       sha256 = "0y5pw2qsga19l79pmmrxc3m7w60yrw9scl9bb71z1alk97ia3k86";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         alsa-core array base bytestring data-accessor enumset
         extensible-exceptions poll transformers utility-ht
       ];
       libraryPkgconfigDepends = [ alsaLib ];
       homepage = "http://www.haskell.org/haskellwiki/ALSA";
       description = "Binding to the ALSA Library API (MIDI sequencer)";
       license = stdenv.lib.licenses.bsd3;
     }) {inherit (pkgs) alsaLib;};
  "alternative-vector" = callPackage
    ({ mkDerivation, base, vector }:
     mkDerivation {
       pname = "alternative-vector";
       version = "0.0.0";
       sha256 = "1cf7akvr9nac1483chh7rd3xp5i5zk78f245lw9ixj6v133lnis2";
       libraryHaskellDepends = [ base vector ];
       homepage = "https://github.com/athanclark/alternative-vector#readme";
       description = "Use vectors instead of lists for many and some";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "alternators" = callPackage
    ({ mkDerivation, base, lens, mmorph, mtl, newtype-generics, stm
     , transformers
     }:
     mkDerivation {
       pname = "alternators";
       version = "1.0.0.0";
       sha256 = "0ffk7xhx7n7h5mhb43ss6kprm9mzc0jzdnagz5wdsgqr8a5mnfa4";
       libraryHaskellDepends = [
         base lens mmorph mtl newtype-generics stm transformers
       ];
       homepage = "https://github.com/louispan/alternators#readme";
       description = "Handy functions when using transformers";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "amazonka" = callPackage
    ({ mkDerivation, amazonka-core, base, bytestring, conduit
     , conduit-extra, directory, exceptions, http-client, http-conduit
     , http-types, ini, mmorph, monad-control, mtl, resourcet, retry
     , tasty, tasty-hunit, text, time, transformers, transformers-base
     , transformers-compat, void
     }:
     mkDerivation {
       pname = "amazonka";
       version = "1.6.0";
       sha256 = "07647x7lq9kaq6bqh38rvdiajji4ks6s7nvxv2xi4v4lhwn8j89p";
       libraryHaskellDepends = [
         amazonka-core base bytestring conduit conduit-extra directory
         exceptions http-client http-conduit http-types ini mmorph
         monad-control mtl resourcet retry text time transformers
         transformers-base transformers-compat void
       ];
       testHaskellDepends = [ base tasty tasty-hunit ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Comprehensive Amazon Web Services SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-apigateway" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-apigateway";
       version = "1.6.0";
       sha256 = "1s2snyx9s23435wsan8hbi1vnql3n3rgh23ffv9d0n43pp7kxrjn";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon API Gateway SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-application-autoscaling" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-application-autoscaling";
       version = "1.6.0";
       sha256 = "1xqxlrw02r4w5h348ab04lrwp4cxk3sksx5xhmxr1macqb8sfdjm";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Application Auto Scaling SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-appstream" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-appstream";
       version = "1.6.0";
       sha256 = "1ps76yri9bnfkr4ya1yc9myrzpf44a01nrkd03kw8qidjcmnk47b";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon AppStream SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-autoscaling" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-autoscaling";
       version = "1.6.0";
       sha256 = "1lzqsn7bmq2yrdmn2hnic5cghmw7kxfmkvqcs8vrk2gg4cmi6lhv";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Auto Scaling SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-budgets" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-budgets";
       version = "1.6.0";
       sha256 = "1dz4gi6qkkmfhz3yqj0pcjgsac4a2036bpiwayxdyzbzda2r5inc";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Budgets SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-certificatemanager" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-certificatemanager";
       version = "1.6.0";
       sha256 = "0sma4rbylmj7dl0irab5vh32na52l1qb34xpa6l4icx1hp397pqz";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Certificate Manager SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudformation" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudformation";
       version = "1.6.0";
       sha256 = "0dc3zb50vq3kkw65kkmrgz1vyjrzm1bmm3znj39i6slhfhjwiqhm";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudFormation SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudfront" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudfront";
       version = "1.6.0";
       sha256 = "18ilsfm3918x3lzwr0v470n7pkc2r1iknlmz8bqbxfgkiyc60slm";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudFront SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudhsm" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudhsm";
       version = "1.6.0";
       sha256 = "0pqvliw77nk9c4ac3zhmbszlxcd13ibrg28rj31yi1lllcw708p4";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudHSM SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudsearch" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudsearch";
       version = "1.6.0";
       sha256 = "1533ii94iyi7z0nsnldxmf0hgkpx01xz10mgsd7z9n5cfrak85yx";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudSearch SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudsearch-domains" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudsearch-domains";
       version = "1.6.0";
       sha256 = "19vwiyrcc591cpaflv0ji8fg7xjx1vba1f4kv0gh9mgfk9px7w14";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudSearch Domain SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudtrail" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudtrail";
       version = "1.6.0";
       sha256 = "090w96krmwd2h4l6s4hz04rfwwi4y6bifzfsw0hn7r62dbwrvnfr";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudTrail SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudwatch" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudwatch";
       version = "1.6.0";
       sha256 = "0lgfvca9gsqd38ly7f6dvvivi34qbpbqqng3hb89cbdjcjri5j15";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudWatch SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudwatch-events" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudwatch-events";
       version = "1.6.0";
       sha256 = "0kgcsbsxi6z84avfzmx9z1111h49yliyyiqww3b39if4dx1mxyqk";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudWatch Events SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cloudwatch-logs" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cloudwatch-logs";
       version = "1.6.0";
       sha256 = "0zgfhz5646s6hkzw2n686rwhz5g9l1mrakagq3ngaagvy15fgr40";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CloudWatch Logs SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-codebuild" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-codebuild";
       version = "1.6.0";
       sha256 = "1ax0am75zy8xddzkn36sc9dpda1j5d28pbrdddhlr98airbl7gzx";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CodeBuild SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-codecommit" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-codecommit";
       version = "1.6.0";
       sha256 = "0594d3frpxc2d9sw265dhph8q1gvzsx9n6l1vcgwglxbpwq2cbwa";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CodeCommit SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-codedeploy" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-codedeploy";
       version = "1.6.0";
       sha256 = "1py2sfnwgavqhb8z2ngxx6b3gh0f9r3l84r5w5dcn6l5p2dbj59k";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CodeDeploy SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-codepipeline" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-codepipeline";
       version = "1.6.0";
       sha256 = "0hy05s7wl410319z2svppg6aqc00zsix6m4l8gniqq1i34iflvn4";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon CodePipeline SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cognito-identity" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cognito-identity";
       version = "1.6.0";
       sha256 = "1mdnr66nq86ndh80ymgvh12crdqyqv212qkb2r2hzz6k23i31b1s";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Cognito Identity SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cognito-idp" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cognito-idp";
       version = "1.6.0";
       sha256 = "1zqzx0l3g7kb22synk0hsy48zz320j906y7jnj7r7fqhrb48k2d9";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Cognito Identity Provider SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-cognito-sync" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-cognito-sync";
       version = "1.6.0";
       sha256 = "0dgldjisp3sxq3csnn7ffsh0bn1r2w32vlyz6dj6f7pkw7c11pjz";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Cognito Sync SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-config" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-config";
       version = "1.6.0";
       sha256 = "1kf98bz7jikj3xh2k49lpf04i0p9y046x4mb93xwrywy0jy3xc2w";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Config SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-core" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, bifunctors, bytestring
     , case-insensitive, conduit, conduit-extra, cryptonite
     , data-ordlist, deepseq, exceptions, hashable, http-client
     , http-conduit, http-types, lens, memory, mtl, QuickCheck
     , quickcheck-unicode, resourcet, scientific, semigroups, tagged
     , tasty, tasty-hunit, tasty-quickcheck, template-haskell, text
     , time, transformers, transformers-compat, unordered-containers
     , xml-conduit, xml-types
     }:
     mkDerivation {
       pname = "amazonka-core";
       version = "1.6.0";
       sha256 = "1j9x17zhyxrg4ds5pdxfjdb4z7hpzn42cydx34j25h5d9avwbqdg";
       libraryHaskellDepends = [
         aeson attoparsec base bifunctors bytestring case-insensitive
         conduit conduit-extra cryptonite deepseq exceptions hashable
         http-client http-conduit http-types lens memory mtl resourcet
         scientific semigroups tagged text time transformers
         transformers-compat unordered-containers xml-conduit xml-types
       ];
       testHaskellDepends = [
         aeson base bytestring case-insensitive conduit data-ordlist
         http-conduit http-types lens QuickCheck quickcheck-unicode tasty
         tasty-hunit tasty-quickcheck template-haskell text time
       ];
       doCheck = false;
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Core data types and functionality for Amazonka libraries";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-datapipeline" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-datapipeline";
       version = "1.6.0";
       sha256 = "1r9sbzc6z5md9z1yzb3sr41ih3kfjg5dx9z38p61rvv413bjs88v";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Data Pipeline SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-devicefarm" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-devicefarm";
       version = "1.6.0";
       sha256 = "0sf56mzd6kbyhq927wys8ayp9mvr0rpisjs6rs3s8m62n2w786yq";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Device Farm SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-directconnect" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-directconnect";
       version = "1.6.0";
       sha256 = "0ciqadw5kam6b51irx45kc3g03qh50pdp8d321v83b2yhv7bk1cd";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Direct Connect SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-discovery" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-discovery";
       version = "1.6.0";
       sha256 = "04wj34lm7amxjcg9bm77nsfjgx76n9b4scj8pspc44qldgbpmikv";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Application Discovery Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-dms" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-dms";
       version = "1.6.0";
       sha256 = "1ww0l7xi9ia6danlm4mdh5d3y38jv56g4dd1jw588hkn5bf1jpx7";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Database Migration Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ds" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ds";
       version = "1.6.0";
       sha256 = "12fkcqhckmrkmh5prfrjdc6dq5cm0g3wsm9pz60jzrmf724k7yh6";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Directory Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-dynamodb" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-dynamodb";
       version = "1.6.0";
       sha256 = "0gwsgyjvqzyhzkfn73854s6hr55va6l6a3m074ajz5wqz3j4xx9k";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon DynamoDB SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-dynamodb-streams" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-dynamodb-streams";
       version = "1.6.0";
       sha256 = "0zz590xdpjabic8m7if6a4pcfrdafqr66wcxnwn2758fyzfk5y5k";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon DynamoDB Streams SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ec2" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ec2";
       version = "1.6.0";
       sha256 = "1k2mm5ypkwr07iwc76b15q823sv5rq5jxfz4r7qckal8w72c4892";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic Compute Cloud SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ecr" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ecr";
       version = "1.6.0";
       sha256 = "0l44xxify9k87imc09wvn56xnmvgf3n2ydvs4s3iph6lnka8l222";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon EC2 Container Registry SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ecs" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ecs";
       version = "1.6.0";
       sha256 = "0gyy9iglv8744p3h249j0mdd5n4f756ci2048frpb51mx2mkb59h";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon EC2 Container Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-efs" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-efs";
       version = "1.6.0";
       sha256 = "1fxg86zzjyv5lvlmn2f2iph5rwcfmwk740i2jjs3xmh68hlmd116";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic File System SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-elasticache" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-elasticache";
       version = "1.6.0";
       sha256 = "0s9rfrv128dsir497g9r6pp68xgfl34rshlcfgyk95fqw8n4m9z4";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon ElastiCache SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-elasticbeanstalk" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-elasticbeanstalk";
       version = "1.6.0";
       sha256 = "0siqna1fcxwpbdvjicyv09l2wcfddda8c47nmdd70ns7cdbhdp61";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic Beanstalk SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-elasticsearch" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-elasticsearch";
       version = "1.6.0";
       sha256 = "10rhbwic050ncinjklllygg3jnv169smkwdcr2xmxv3g3jpgqa9l";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elasticsearch Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-elastictranscoder" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-elastictranscoder";
       version = "1.6.0";
       sha256 = "02n1yg4vks5sc8mqm5prz2clgf7pyn9yf98mx1h1mk89gv4sf4mb";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic Transcoder SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-elb" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-elb";
       version = "1.6.0";
       sha256 = "0kbyz4czsfjfgfw49wqrkkk2ma4k333kd5xfcz9gf9ick8079jar";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic Load Balancing SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-elbv2" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-elbv2";
       version = "1.6.0";
       sha256 = "1j92qr8sfsidax606pyzv1zn08c2rcij0853c5raq4xn55gd6lra";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic Load Balancing SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-emr" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-emr";
       version = "1.6.0";
       sha256 = "0kvpv655dk619lq2ahkljxdhscj22lyci3z9ybpsvzk1xrc79879";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Elastic MapReduce SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-gamelift" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-gamelift";
       version = "1.6.0";
       sha256 = "1z2zfzpag9v8mb6wa479hfkhdqf84x5jyc6pl302vl688d5bvkgb";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon GameLift SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-glacier" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-glacier";
       version = "1.6.0";
       sha256 = "04zrw3rqly4qm5hkwddr0p73xyjx5vm5xsvcnmabmpxx3x6l61sk";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Glacier SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-health" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-health";
       version = "1.6.0";
       sha256 = "0yx6bdhkgf6fgrc8i6abbpwnxlzqdnmw6pqan02gz679jf7b25n2";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Health APIs and Notifications SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-iam" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-iam";
       version = "1.6.0";
       sha256 = "0pchhnrfvry7v6gwn1rxx0hyd8xd2hdlzfcm1d02hgawg4x82dd3";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Identity and Access Management SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-importexport" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-importexport";
       version = "1.6.0";
       sha256 = "016dgp4s2669jd3db1f8ngynhjrkr77l981rmf3wc92fsyyg4l89";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Import/Export SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-inspector" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-inspector";
       version = "1.6.0";
       sha256 = "0gp1rkrm2xv13cdn3shr5824g942yn2dwqvw3ln78fz671g01vxw";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Inspector SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-iot" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-iot";
       version = "1.6.0";
       sha256 = "1l16ib9p6qzs4079a02hg852f0g79yv75k0ky3jj3l3vr5lj22qq";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon IoT SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-iot-dataplane" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-iot-dataplane";
       version = "1.6.0";
       sha256 = "0hl7m3s6ck01k5h00q414sc3yzpr41gamj7pfr7wr97cwv03prmf";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon IoT Data Plane SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-kinesis" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-kinesis";
       version = "1.6.0";
       sha256 = "0f1gwa92pcdrb1ijxinhq8vjspgigk5kcr37hnj6mzs6kv9437jl";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Kinesis SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-kinesis-analytics" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-kinesis-analytics";
       version = "1.6.0";
       sha256 = "1vl5yski9fqpwv9f4aq3i2zqkjgkmn3lnpm3phg59x3fb4w59yvy";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Kinesis Analytics SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-kinesis-firehose" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-kinesis-firehose";
       version = "1.6.0";
       sha256 = "172ljz8ihcb8cx800xy0wpicdsqip52ng2ig1clk3h48r36la18j";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Kinesis Firehose SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-kms" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-kms";
       version = "1.6.0";
       sha256 = "16cfkvl7n7drx0z6fr5j88lyg9rkg3bfly2zb2jx155lhcsk79bs";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Key Management Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-lambda" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-lambda";
       version = "1.6.0";
       sha256 = "01lvr775kakpbr2p7126nw3022dyp5p41s98asf9fwkmda4jd5k4";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Lambda SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-lightsail" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-lightsail";
       version = "1.6.0";
       sha256 = "1sxcc0hbvngxxjg0mg2rb3wkdax8123qbak8k3z0h3igzxm4q6vl";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Lightsail SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-marketplace-analytics" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-marketplace-analytics";
       version = "1.6.0";
       sha256 = "0sjxrnzcrzgd75kd841r9hadpg9zqmxx4g5hqqqm2yy1x6q0sv2d";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Marketplace Commerce Analytics SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-marketplace-metering" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-marketplace-metering";
       version = "1.6.0";
       sha256 = "0xszzcmaz2d5h8cbdqaar1f3am35h31k5w1wihy6fyf5r95f2bb7";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Marketplace Metering SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ml" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ml";
       version = "1.6.0";
       sha256 = "1zkdal599npbylic9sgvzpfss15ri9k61pp9xwhafbm7f5xjvhcx";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Machine Learning SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-opsworks" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-opsworks";
       version = "1.6.0";
       sha256 = "066rfarz6cbdcal6l5qn11pi3n2byzxbb6013crmdicfkcrp4hws";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon OpsWorks SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-opsworks-cm" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-opsworks-cm";
       version = "1.6.0";
       sha256 = "1x28lxvjz6sdkzlghw94h97yw8ywypz0v3d0rqazvzvhbxsrp7jg";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon OpsWorks for Chef Automate SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-pinpoint" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-pinpoint";
       version = "1.6.0";
       sha256 = "01dh2vwigisbx4jrpaq76l1463v7qy1wx6brd1d7sdczpnmcvy5h";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Pinpoint SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-polly" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-polly";
       version = "1.6.0";
       sha256 = "1l4ajm7ca0s4xwzs9brdhbjz1mhw8smmy7wzddhrxjr84vxdqgkp";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Polly SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-rds" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-rds";
       version = "1.6.0";
       sha256 = "0kf23dgv1zirxp35g1czlfnzq9ccwr1a67yvqnl3nfvpacy634y7";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Relational Database Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-redshift" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-redshift";
       version = "1.6.0";
       sha256 = "0adkj055f7kb1klxnvl9n1p8l504jgcpdw1ibgc2xm786rlvjsj2";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Redshift SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-rekognition" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-rekognition";
       version = "1.6.0";
       sha256 = "1a1jynpr7bkzd5rs5p4781wrvnf1wivlzfjmn53jfdp545q44bj6";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Rekognition SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-route53" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-route53";
       version = "1.6.0";
       sha256 = "05v3m8fcpxbhhsh8nm0m35c357cx94z6xn36c75jhjy4v4xpgvv8";
       libraryHaskellDepends = [ amazonka-core base text ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Route 53 SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-route53-domains" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-route53-domains";
       version = "1.6.0";
       sha256 = "1sm5w4r6kb8fl3wikp9n2hda3bxwr83397s729s3dispbwpzwnzp";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Route 53 Domains SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-s3" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , lens, tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-s3";
       version = "1.6.0";
       sha256 = "0irz8vyklapjy3w3qasidpvq4hk2qwkmhrnrd23sf4yzs2xqx8gc";
       libraryHaskellDepends = [ amazonka-core base lens text ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Simple Storage Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-sdb" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-sdb";
       version = "1.6.0";
       sha256 = "1zdxbwzkvj1fi9lay3zyqxbb2vzviwc6h2gfmjh7invg68hqphmr";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon SimpleDB SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-servicecatalog" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-servicecatalog";
       version = "1.6.0";
       sha256 = "0r7j8v5mn048hqlp2h2mv7lyld457k22i95mdriyqhrb3cxxzy0i";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Service Catalog SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ses" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ses";
       version = "1.6.0";
       sha256 = "00mxab03vhmmb0d5xfa00x4c0qz0vkfnfap1lz8kzbps73kk53bp";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Simple Email Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-shield" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-shield";
       version = "1.6.0";
       sha256 = "1x7b8wvv50iqvdxydpnmvncz3yx3026vq4f9rg1pnqas5ddsi0xr";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Shield SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-sms" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-sms";
       version = "1.6.0";
       sha256 = "0zx4rpq5k18lqv5x55hf30s30g8x6yrsbv55h13n1mw856fkakgw";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Server Migration Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-snowball" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-snowball";
       version = "1.6.0";
       sha256 = "09gf0balrk7hzmg9ynasz4jf3jywj57lyp0wiggixfh5jbz30jsk";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Import/Export Snowball SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-sns" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-sns";
       version = "1.6.0";
       sha256 = "0wvmwca48rqls0szbvdvfr796iq8i3kp5l8l7dcysn8k0d4ba5hx";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Simple Notification Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-sqs" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-sqs";
       version = "1.6.0";
       sha256 = "0cq4j16f12z4lzsi9clh3pzcad7zfpcg5z8af2ap0w18gmq3hf3l";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Simple Queue Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-ssm" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-ssm";
       version = "1.6.0";
       sha256 = "06kh3id8l24rq5wvjakfz1w62fr3cyzl2axdsp7hcb8afr4q488i";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Simple Systems Manager (SSM) SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-stepfunctions" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-stepfunctions";
       version = "1.6.0";
       sha256 = "1gxci7x94jc7187wv8mrd8g8vy0ns9r6b8l0w5jxgmr8bma8xb4r";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Step Functions SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-storagegateway" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-storagegateway";
       version = "1.6.0";
       sha256 = "0gdl905h9d5g20npx4ihc0fajgcqn5vjnqiss7mhfcgha1k3f1kg";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Storage Gateway SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-sts" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-sts";
       version = "1.6.0";
       sha256 = "04lsm5wpzrykkq94fcrkj4cwc5slzcwmzqvsgw9mnyprsrknn19n";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Security Token Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-support" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-support";
       version = "1.6.0";
       sha256 = "1sakd3r8g9r0ms7mrnvzh679i26pamh1ranpp7a1fa2zjzpllhvz";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Support SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-swf" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-swf";
       version = "1.6.0";
       sha256 = "145aali4pqzra7r34g6ykbizwrqnapj6mwadqr31ylf1m5xl63hz";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon Simple Workflow Service SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-test" = callPackage
    ({ mkDerivation, aeson, amazonka-core, base, bifunctors, bytestring
     , case-insensitive, conduit, conduit-extra, groom, http-client
     , http-types, process, resourcet, tasty, tasty-hunit
     , template-haskell, temporary, text, time, unordered-containers
     , yaml
     }:
     mkDerivation {
       pname = "amazonka-test";
       version = "1.6.0";
       sha256 = "0a6xfp97hijhqmhj9nv4aqax08ry8y809jpjhyj2819p01wvga26";
       libraryHaskellDepends = [
         aeson amazonka-core base bifunctors bytestring case-insensitive
         conduit conduit-extra groom http-client http-types process
         resourcet tasty tasty-hunit template-haskell temporary text time
         unordered-containers yaml
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Common functionality for Amazonka library test-suites";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-waf" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-waf";
       version = "1.6.0";
       sha256 = "105rpfal53qyjavknpkpiglndr8cgcsybl8iaw7zpn725g2rw2w8";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon WAF SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-workspaces" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-workspaces";
       version = "1.6.0";
       sha256 = "110wr4ah80lz9yjxsx3yng2mx5r2z361rs4k6sr4v6jiij6k9ksn";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon WorkSpaces SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amazonka-xray" = callPackage
    ({ mkDerivation, amazonka-core, amazonka-test, base, bytestring
     , tasty, tasty-hunit, text, time, unordered-containers
     }:
     mkDerivation {
       pname = "amazonka-xray";
       version = "1.6.0";
       sha256 = "1w4ham3rzkyz8ns5xrnclyw0gvaswm6kyxjrfz6h19hs6rsh0lcg";
       libraryHaskellDepends = [ amazonka-core base ];
       testHaskellDepends = [
         amazonka-core amazonka-test base bytestring tasty tasty-hunit text
         time unordered-containers
       ];
       homepage = "https://github.com/brendanhay/amazonka";
       description = "Amazon X-Ray SDK";
       license = stdenv.lib.licenses.mpl20;
     }) {};
  "amqp" = callPackage
    ({ mkDerivation, base, binary, bytestring, clock, connection
     , containers, data-binary-ieee754, hspec, hspec-expectations
     , monad-control, network, network-uri, split, stm, text, vector
     , xml
     }:
     mkDerivation {
       pname = "amqp";
       version = "0.18.1";
       sha256 = "0j728d7q013gcqv0m6vpm401hnpbmzzb3i6br8kpxybdjzmy4y26";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base binary bytestring clock connection containers
         data-binary-ieee754 monad-control network network-uri split stm
         text vector
       ];
       executableHaskellDepends = [ base containers xml ];
       testHaskellDepends = [
         base binary bytestring clock connection containers
         data-binary-ieee754 hspec hspec-expectations network network-uri
         split stm text vector
       ];
       doCheck = false;
       homepage = "https://github.com/hreinhardt/amqp";
       description = "Client library for AMQP servers (currently only RabbitMQ)";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "annotated-wl-pprint" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "annotated-wl-pprint";
       version = "0.7.0";
       sha256 = "061xfz6qany3wf95csl8dcik2pz22cn8iv1qchhm16isw5zjs9hc";
       revision = "1";
       editedCabalFile = "138k24qxvl90l7dwdw1b3w36mpw93n0xi0nljblqg88pxg7jcvjx";
       libraryHaskellDepends = [ base ];
       homepage = "https://github.com/david-christiansen/annotated-wl-pprint";
       description = "The Wadler/Leijen Pretty Printer, with annotation support";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ansi-terminal" = callPackage
    ({ mkDerivation, base, colour }:
     mkDerivation {
       pname = "ansi-terminal";
       version = "0.8.0.4";
       sha256 = "0428gq8m3fdnb7ldcsyk97qcch76hcxbgh2666p6f76fs2qbhg7b";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base colour ];
       homepage = "https://github.com/feuerbach/ansi-terminal";
       description = "Simple ANSI terminal support, with Windows compatibility";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ansi-wl-pprint" = callPackage
    ({ mkDerivation, ansi-terminal, base }:
     mkDerivation {
       pname = "ansi-wl-pprint";
       version = "0.6.8.2";
       sha256 = "0gnb4mkqryv08vncxnj0bzwcnd749613yw3cxfzw6y3nsldp4c56";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ ansi-terminal base ];
       homepage = "http://github.com/ekmett/ansi-wl-pprint";
       description = "The Wadler/Leijen Pretty Printer for colored ANSI terminal output";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "api-field-json-th" = callPackage
    ({ mkDerivation, aeson, base, HUnit, lens, split, template-haskell
     , text
     }:
     mkDerivation {
       pname = "api-field-json-th";
       version = "0.1.0.2";
       sha256 = "097pn19247g73rw0si33m5l1w797s9759ma3ki9h90dwd4w9rm5q";
       libraryHaskellDepends = [
         aeson base lens split template-haskell text
       ];
       testHaskellDepends = [ aeson base HUnit lens ];
       homepage = "https://github.com/nakaji-dayo/api-field-json-th";
       description = "option of aeson's deriveJSON";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "app-settings" = callPackage
    ({ mkDerivation, base, containers, directory, hspec, HUnit, mtl
     , parsec, text
     }:
     mkDerivation {
       pname = "app-settings";
       version = "0.2.0.11";
       sha256 = "1cahrpf42g5ids4k6hlzys1kmbgy1ypgax9ljckwymafradcc53a";
       libraryHaskellDepends = [
         base containers directory mtl parsec text
       ];
       testHaskellDepends = [
         base containers directory hspec HUnit mtl parsec text
       ];
       homepage = "https://github.com/emmanueltouzery/app-settings";
       description = "A library to manage application settings (INI file-like)";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "appar" = callPackage
    ({ mkDerivation, base, bytestring }:
     mkDerivation {
       pname = "appar";
       version = "0.1.4";
       sha256 = "09jb9ij78fdkz2qk66rw99q19qnm504dpv0yq0pjsl6xwjmndsjq";
       libraryHaskellDepends = [ base bytestring ];
       description = "A simple applicative parser";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "apply-refact" = callPackage
    ({ mkDerivation, base, containers, directory, filemanip, filepath
     , ghc, ghc-exactprint, mtl, optparse-applicative, process, refact
     , silently, syb, tasty, tasty-expected-failure, tasty-golden
     , temporary, transformers, unix-compat
     }:
     mkDerivation {
       pname = "apply-refact";
       version = "0.5.0.0";
       sha256 = "1bvlbchpma3vlxfvjbyd01rmzqc9h5q3my9n7v3wal2p7ysvjpqz";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base containers directory filemanip ghc ghc-exactprint mtl process
         refact syb temporary transformers unix-compat
       ];
       executableHaskellDepends = [
         base containers directory filemanip filepath ghc ghc-exactprint mtl
         optparse-applicative process refact syb temporary transformers
         unix-compat
       ];
       testHaskellDepends = [
         base containers directory filemanip filepath ghc ghc-exactprint mtl
         optparse-applicative process refact silently syb tasty
         tasty-expected-failure tasty-golden temporary transformers
         unix-compat
       ];
       description = "Perform refactorings specified by the refact library";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "apportionment" = callPackage
    ({ mkDerivation, base, containers, utility-ht }:
     mkDerivation {
       pname = "apportionment";
       version = "0.0.0.3";
       sha256 = "062v4a1ip7zy20b03z1jajqy2ylx5fl74p7px54b1vajf6vx0wcg";
       libraryHaskellDepends = [ base containers utility-ht ];
       homepage = "http://hub.darcs.net/thielema/apportionment";
       description = "Round a set of numbers while maintaining its sum";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "approximate" = callPackage
    ({ mkDerivation, base, binary, bytes, Cabal, cabal-doctest, cereal
     , comonad, deepseq, directory, doctest, filepath, ghc-prim
     , hashable, lens, log-domain, pointed, safecopy, semigroupoids
     , semigroups, simple-reflect, vector
     }:
     mkDerivation {
       pname = "approximate";
       version = "0.3.1";
       sha256 = "18ifmp1c2km3ssp51m94vxqzx7yx6c21ychp7ajnhgg7v4bgfdyq";
       setupHaskellDepends = [ base Cabal cabal-doctest ];
       libraryHaskellDepends = [
         base binary bytes cereal comonad deepseq ghc-prim hashable lens
         log-domain pointed safecopy semigroupoids semigroups vector
       ];
       testHaskellDepends = [
         base directory doctest filepath semigroups simple-reflect
       ];
       doHaddock = false;
       homepage = "http://github.com/analytics/approximate/";
       description = "Approximate discrete values and numbers";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "arithmoi" = callPackage
    ({ mkDerivation, array, base, containers, exact-pi, gauge, ghc-prim
     , integer-gmp, integer-logarithms, mtl, QuickCheck, random
     , smallcheck, tasty, tasty-hunit, tasty-quickcheck
     , tasty-smallcheck, transformers, vector
     }:
     mkDerivation {
       pname = "arithmoi";
       version = "0.7.0.0";
       sha256 = "0303bqlbf8abixcq3x3px2ijj01c9hlqadkv8rhls6f64a8h8cwb";
       revision = "2";
       editedCabalFile = "1db2pcwip682f4zs1qnqzqqdswhqzbsxydy89m6zqm5ddlgrw5sq";
       libraryHaskellDepends = [
         array base containers exact-pi ghc-prim integer-gmp
         integer-logarithms mtl random vector
       ];
       testHaskellDepends = [
         base containers integer-gmp QuickCheck smallcheck tasty tasty-hunit
         tasty-quickcheck tasty-smallcheck transformers vector
       ];
       benchmarkHaskellDepends = [
         base containers gauge integer-logarithms random vector
       ];
       homepage = "https://github.com/cartazio/arithmoi";
       description = "Efficient basic number-theoretic functions";
       license = stdenv.lib.licenses.mit;
     }) {};
  "array-memoize" = callPackage
    ({ mkDerivation, array, base }:
     mkDerivation {
       pname = "array-memoize";
       version = "0.6.0";
       sha256 = "1p05vg8mdyad03aa7s1nrgw5xqgl80f6l7v0llhmi1q4xnrqrj3n";
       libraryHaskellDepends = [ array base ];
       description = "Memoization combinators using arrays for finite sub-domains of functions";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "arrow-extras" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "arrow-extras";
       version = "0.1.0.1";
       sha256 = "0v3ab3h3rg38dvmyqqfsysgfpib8i81s87wr965cf7lxhfx3lg61";
       libraryHaskellDepends = [ base ];
       homepage = "https://github.com/louispan/arrow-extras#readme";
       description = "Extra functions for Control.Arrow";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "arrow-list" = callPackage
    ({ mkDerivation, base, containers, mtl }:
     mkDerivation {
       pname = "arrow-list";
       version = "0.7";
       sha256 = "1n6m77hdkpjd12r0b8fwxiz3jz0j86cplgsk27m2raj86vr3dy1k";
       libraryHaskellDepends = [ base containers mtl ];
       homepage = "https://github.com/silkapp/arrow-list";
       description = "List arrows for Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "ascii-progress" = callPackage
    ({ mkDerivation, async, base, concurrent-output, data-default
     , hspec, QuickCheck, time
     }:
     mkDerivation {
       pname = "ascii-progress";
       version = "0.3.3.0";
       sha256 = "0glixkmqk7zz4g88sfrqfrdxd4na0krlwr50m2dkra091jwacgvy";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         async base concurrent-output data-default time
       ];
       testHaskellDepends = [
         async base concurrent-output data-default hspec QuickCheck time
       ];
       homepage = "https://github.com/yamadapc/haskell-ascii-progress";
       description = "A simple progress bar for the console";
       license = stdenv.lib.licenses.mit;
     }) {};
  "asn1-encoding" = callPackage
    ({ mkDerivation, asn1-types, base, bytestring, hourglass, mtl
     , tasty, tasty-quickcheck, text
     }:
     mkDerivation {
       pname = "asn1-encoding";
       version = "0.9.5";
       sha256 = "0adgbamyq0mj1l1hdq4zyyllay714bac1wl0rih3fv1z6vykp1hy";
       libraryHaskellDepends = [ asn1-types base bytestring hourglass ];
       testHaskellDepends = [
         asn1-types base bytestring hourglass mtl tasty tasty-quickcheck
         text
       ];
       homepage = "http://github.com/vincenthz/hs-asn1";
       description = "ASN1 data reader and writer in RAW, BER and DER forms";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "asn1-parse" = callPackage
    ({ mkDerivation, asn1-encoding, asn1-types, base, bytestring }:
     mkDerivation {
       pname = "asn1-parse";
       version = "0.9.4";
       sha256 = "025prsihk5g6rdv9xlfmj0zpa0wa3qjzj5i4ilzvg7f6f3sji8y6";
       libraryHaskellDepends = [
         asn1-encoding asn1-types base bytestring
       ];
       homepage = "https://github.com/vincenthz/hs-asn1";
       description = "Simple monadic parser for ASN1 stream types";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "asn1-types" = callPackage
    ({ mkDerivation, base, bytestring, hourglass, memory }:
     mkDerivation {
       pname = "asn1-types";
       version = "0.3.2";
       sha256 = "05vjchyqiy9n275cygffhn0ma7fz7jx52j0dcdm9qm8h9bziymqc";
       libraryHaskellDepends = [ base bytestring hourglass memory ];
       homepage = "http://github.com/vincenthz/hs-asn1-types";
       description = "ASN.1 types";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "assert-failure" = callPackage
    ({ mkDerivation, base, pretty-show, text }:
     mkDerivation {
       pname = "assert-failure";
       version = "0.1.2.2";
       sha256 = "17aapnal893awjwfjw8lfk1n688sfkpckpvfb0rnjkvvabyid57n";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [ base pretty-show text ];
       homepage = "https://github.com/Mikolaj/assert-failure";
       description = "Syntactic sugar improving 'assert' and 'error'";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "astro" = callPackage
    ({ mkDerivation, base, HUnit, matrix, QuickCheck, test-framework
     , test-framework-hunit, test-framework-quickcheck2, time
     }:
     mkDerivation {
       pname = "astro";
       version = "0.4.2.1";
       sha256 = "0agy9a91n1sy6rgdgwvdz354x452j2lg7nr3by7z9r22rwdxwpfs";
       libraryHaskellDepends = [ base matrix time ];
       testHaskellDepends = [
         base HUnit QuickCheck test-framework test-framework-hunit
         test-framework-quickcheck2 time
       ];
       homepage = "https://github.com/aligusnet/astro";
       description = "Amateur astronomical computations";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "async" = callPackage
    ({ mkDerivation, base, hashable, HUnit, stm, test-framework
     , test-framework-hunit
     }:
     mkDerivation {
       pname = "async";
       version = "2.2.1";
       sha256 = "09whscli1q5z7lzyq9rfk0bq1ydplh6pjmc6qv0x668k5818c2wg";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base hashable stm ];
       testHaskellDepends = [
         base HUnit stm test-framework test-framework-hunit
       ];
       homepage = "https://github.com/simonmar/async";
       description = "Run IO operations asynchronously and wait for their results";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "async-extra" = callPackage
    ({ mkDerivation, async, base, deepseq, split }:
     mkDerivation {
       pname = "async-extra";
       version = "0.2.0.0";
       sha256 = "0hyc27mphjpc7m9khs47ch0q6j6hy2hmibk82vzrfmc3rfjxa1hd";
       libraryHaskellDepends = [ async base deepseq split ];
       homepage = "https://github.com/agrafix/async-extra#readme";
       description = "Useful concurrent combinators";
       license = stdenv.lib.licenses.mit;
     }) {};
  "async-refresh" = callPackage
    ({ mkDerivation, base, criterion, formatting, HUnit, lifted-async
     , microlens, microlens-th, monad-logger, safe-exceptions, stm
     , test-framework, test-framework-hunit, text, unliftio
     , unliftio-core
     }:
     mkDerivation {
       pname = "async-refresh";
       version = "0.3.0.0";
       sha256 = "1j9llc84f93srw80pyldcglzmssl0l961bzlwsrvbaa84ldhcs6s";
       libraryHaskellDepends = [
         base formatting lifted-async microlens microlens-th monad-logger
         safe-exceptions stm text unliftio unliftio-core
       ];
       testHaskellDepends = [
         base criterion HUnit monad-logger stm test-framework
         test-framework-hunit text
       ];
       homepage = "https://github.com/mtesseract/async-refresh";
       description = "Package implementing core logic for refreshing of expiring data";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "async-refresh-tokens" = callPackage
    ({ mkDerivation, async-refresh, base, bytestring, criterion
     , formatting, HUnit, microlens, microlens-th, monad-logger
     , safe-exceptions, test-framework, test-framework-hunit, text
     , unliftio, unliftio-core
     }:
     mkDerivation {
       pname = "async-refresh-tokens";
       version = "0.4.0.0";
       sha256 = "1py7ips87gbwdhxdfv0xh4hkgw0my4nkkz4w1vwcb3s296a439v7";
       libraryHaskellDepends = [
         async-refresh base bytestring formatting microlens microlens-th
         monad-logger safe-exceptions text unliftio unliftio-core
       ];
       testHaskellDepends = [
         base criterion HUnit monad-logger test-framework
         test-framework-hunit unliftio
       ];
       homepage = "https://github.com/mtesseract/async-refresh-tokens#readme";
       description = "Package implementing core logic for refreshing of expiring access tokens";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "async-timer" = callPackage
    ({ mkDerivation, async, base, containers, criterion
     , safe-exceptions, tasty, tasty-hunit, unliftio, unliftio-core
     }:
     mkDerivation {
       pname = "async-timer";
       version = "0.2.0.0";
       sha256 = "1q6f0ig8m1ij1yz07b36799gavppb7dkwyvlc724gaj1q72bych6";
       libraryHaskellDepends = [
         async base safe-exceptions unliftio unliftio-core
       ];
       testHaskellDepends = [
         async base containers criterion tasty tasty-hunit
       ];
       homepage = "https://github.com/mtesseract/async-timer#readme";
       description = "Provides API for timer based execution of IO actions";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "atom-basic" = callPackage
    ({ mkDerivation, base, base64-bytestring, bytestring, network
     , network-uri, text, time
     }:
     mkDerivation {
       pname = "atom-basic";
       version = "0.2.5";
       sha256 = "1vkm5wfsgprs42qjzxchgrpxj3xalpg2zd79n9isvlxsp1krdgi4";
       libraryHaskellDepends = [
         base base64-bytestring bytestring network network-uri text time
       ];
       description = "Basic Atom feed construction";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "atom-conduit" = callPackage
    ({ mkDerivation, base, blaze-builder, conduit, conduit-combinators
     , data-default, lens-simple, mono-traversable, parsers
     , quickcheck-instances, resourcet, safe-exceptions, tasty
     , tasty-hunit, tasty-quickcheck, text, time, timerep
     , uri-bytestring, xml-conduit, xml-types
     }:
     mkDerivation {
       pname = "atom-conduit";
       version = "0.5.0.1";
       sha256 = "1k9ix1br0vfajjqnprlnhzidvkx9a1pmkyiv2rb3nxb7fp3wb24c";
       libraryHaskellDepends = [
         base blaze-builder conduit conduit-combinators lens-simple
         mono-traversable parsers safe-exceptions text time timerep
         uri-bytestring xml-conduit xml-types
       ];
       testHaskellDepends = [
         base blaze-builder conduit conduit-combinators data-default
         lens-simple mono-traversable parsers quickcheck-instances resourcet
         safe-exceptions tasty tasty-hunit tasty-quickcheck text time
         uri-bytestring xml-conduit xml-types
       ];
       description = "Streaming parser/renderer for the Atom 1.0 standard (RFC 4287).";
       license = stdenv.lib.licenses.publicDomain;
     }) {};
  "atomic-primops" = callPackage
    ({ mkDerivation, base, ghc-prim, primitive }:
     mkDerivation {
       pname = "atomic-primops";
       version = "0.8.2";
       sha256 = "0cyr2x6xqz6s233znrz9rnrfj56m9bmnawwnka0lsqqy1hp8gy37";
       revision = "1";
       editedCabalFile = "0gdcd84x2s4jiry0was74rzv9l53an1q6ad8jiaj37fr4fim0wcc";
       libraryHaskellDepends = [ base ghc-prim primitive ];
       homepage = "https://github.com/rrnewton/haskell-lockfree/wiki";
       description = "A safe approach to CAS and other atomic ops in Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "atomic-write" = callPackage
    ({ mkDerivation, base, bytestring, directory, filepath, hspec
     , temporary, text, unix-compat
     }:
     mkDerivation {
       pname = "atomic-write";
       version = "0.2.0.5";
       sha256 = "1iaq0hprxcv0sl1sgwcgmm87zraf738va1bciwnx2jkk3k1v9iyv";
       libraryHaskellDepends = [
         base bytestring directory filepath temporary text unix-compat
       ];
       testHaskellDepends = [
         base bytestring directory filepath hspec temporary text unix-compat
       ];
       homepage = "https://github.com/stackbuilders/atomic-write";
       description = "Atomically write to a file";
       license = stdenv.lib.licenses.mit;
     }) {};
  "attoparsec" = callPackage
    ({ mkDerivation, array, base, bytestring, case-insensitive
     , containers, criterion, deepseq, directory, filepath, ghc-prim
     , http-types, parsec, scientific, text, transformers
     , unordered-containers, vector
     }:
     mkDerivation {
       pname = "attoparsec";
       version = "0.13.2.2";
       sha256 = "0j6qcwd146yzlkc9mcvzvnixsyl65n2a68l28322q5v9p4g4g4yx";
       libraryHaskellDepends = [
         array base bytestring containers deepseq scientific text
         transformers
       ];
       benchmarkHaskellDepends = [
         array base bytestring case-insensitive containers criterion deepseq
         directory filepath ghc-prim http-types parsec scientific text
         transformers unordered-containers vector
       ];
       doCheck = false;
       homepage = "https://github.com/bos/attoparsec";
       description = "Fast combinator parsing for bytestrings and text";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-base64" = callPackage
    ({ mkDerivation, attoparsec, base, bytestring, text, word8 }:
     mkDerivation {
       pname = "attoparsec-base64";
       version = "0.0.0";
       sha256 = "1rvkc7kaya42a8djkyj642r5dq952gwkhinif9r22ijaic656cq8";
       libraryHaskellDepends = [ attoparsec base bytestring text word8 ];
       homepage = "https://github.com/athanclark/attoparsec-base64#readme";
       description = "Fetch only base64 characters, erroring in the attoparsec monad on failure";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-binary" = callPackage
    ({ mkDerivation, attoparsec, base, bytestring }:
     mkDerivation {
       pname = "attoparsec-binary";
       version = "0.2";
       sha256 = "02vswxsgayw50xli7mbacsjmk1diifzkfgnyfn9ck5mk41dl9rh5";
       libraryHaskellDepends = [ attoparsec base bytestring ];
       description = "Binary processing extensions to Attoparsec";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-expr" = callPackage
    ({ mkDerivation, attoparsec, base }:
     mkDerivation {
       pname = "attoparsec-expr";
       version = "0.1.1.2";
       sha256 = "0z25pc3rq98ysk92jclr90n35982a566sxri51yh1s9c24vd8k4d";
       libraryHaskellDepends = [ attoparsec base ];
       description = "Port of parsec's expression parser to attoparsec";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-ip" = callPackage
    ({ mkDerivation, attoparsec, base, ip }:
     mkDerivation {
       pname = "attoparsec-ip";
       version = "0.0.1";
       sha256 = "0aananvfa7h9d73yf1c69zw5b3s3m67qhfmfrzdbifw3wj5cm9cd";
       libraryHaskellDepends = [ attoparsec base ip ];
       testHaskellDepends = [ base ];
       homepage = "https://github.com/athanclark/attoparsec-ip#readme";
       description = "Parse IP data types with attoparsec";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-iso8601" = callPackage
    ({ mkDerivation, attoparsec, base, base-compat, text, time }:
     mkDerivation {
       pname = "attoparsec-iso8601";
       version = "1.0.0.0";
       sha256 = "12l55b76bhya9q89mfmqmy6sl5v39b6gzrw5rf3f70vkb23nsv5a";
       revision = "1";
       editedCabalFile = "06f7pgmmc8456p3hc1y23kz1y127gfczy7s00wz1rls9g2sm2vi4";
       libraryHaskellDepends = [ attoparsec base base-compat text time ];
       homepage = "https://github.com/bos/aeson";
       description = "Parsing of ISO 8601 dates, originally from aeson";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-path" = callPackage
    ({ mkDerivation, attoparsec, base, path, QuickCheck
     , quickcheck-instances, text
     }:
     mkDerivation {
       pname = "attoparsec-path";
       version = "0.0.0.1";
       sha256 = "035n430iwqkfkxpphgn8xjd3h5qav8dwd1gm4a3v3z8h49i2cwfh";
       libraryHaskellDepends = [ attoparsec base path text ];
       testHaskellDepends = [
         attoparsec base QuickCheck quickcheck-instances text
       ];
       homepage = "https://github.com/athanclark/attoparsec-path#readme";
       description = "Convenience bindings between path and attoparsec";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "attoparsec-uri" = callPackage
    ({ mkDerivation, attoparsec, attoparsec-ip, base, bytedump, ip
     , strict, text, vector
     }:
     mkDerivation {
       pname = "attoparsec-uri";
       version = "0.0.4";
       sha256 = "1wzisb9xnykaxnp1jp0a3lvh1m2swynk2r2mg6nfv5jzlv52q0sf";
       libraryHaskellDepends = [
         attoparsec attoparsec-ip base bytedump ip strict text vector
       ];
       homepage = "https://github.com/athanclark/attoparsec-uri#readme";
       description = "URI parser / printer using attoparsec";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "audacity" = callPackage
    ({ mkDerivation, base, bytestring, deepseq, directory
     , explicit-exception, filepath, non-empty, semigroups
     , storable-record, storablevector, tagchup, transformers
     , utility-ht, xml-basic
     }:
     mkDerivation {
       pname = "audacity";
       version = "0.0.2";
       sha256 = "1916phnj3m12apyjarmda48xr2bq19rfn7sn6nskkbg6qjqxzlnr";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [
         base bytestring deepseq directory explicit-exception filepath
         non-empty semigroups storable-record storablevector tagchup
         transformers utility-ht xml-basic
       ];
       homepage = "http://hub.darcs.net/thielema/audacity";
       description = "Interchange with the Audacity sound signal editor";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "authenticate" = callPackage
    ({ mkDerivation, aeson, attoparsec, base, blaze-builder, bytestring
     , case-insensitive, conduit, containers, http-conduit, http-types
     , network-uri, resourcet, tagstream-conduit, text, transformers
     , unordered-containers, xml-conduit
     }:
     mkDerivation {
       pname = "authenticate";
       version = "1.3.4";
       sha256 = "1f1gjggfq114h3nrlzg2svm0j5ghp6n9zlgb3fnq2pgpzpdndm9z";
       libraryHaskellDepends = [
         aeson attoparsec base blaze-builder bytestring case-insensitive
         conduit containers http-conduit http-types network-uri resourcet
         tagstream-conduit text transformers unordered-containers
         xml-conduit
       ];
       homepage = "http://github.com/yesodweb/authenticate";
       description = "Authentication methods for Haskell web applications";
       license = stdenv.lib.licenses.mit;
     }) {};
  "authenticate-oauth" = callPackage
    ({ mkDerivation, base, base64-bytestring, blaze-builder, bytestring
     , crypto-pubkey-types, data-default, http-client, http-types
     , random, RSA, SHA, time, transformers, transformers-compat
     }:
     mkDerivation {
       pname = "authenticate-oauth";
       version = "1.6";
       sha256 = "0xc37yql79r9idjfdhzg85syrwwgaxggcv86myi6zq2pzl89yvfj";
       revision = "1";
       editedCabalFile = "1fxwn8bn6qs8dhxq0q04psq7zp1qvw1b6g3vmsclgyj9p7kr77ms";
       libraryHaskellDepends = [
         base base64-bytestring blaze-builder bytestring crypto-pubkey-types
         data-default http-client http-types random RSA SHA time
         transformers transformers-compat
       ];
       homepage = "http://github.com/yesodweb/authenticate";
       description = "Library to authenticate with OAuth for Haskell web applications";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "auto" = callPackage
    ({ mkDerivation, base, base-orphans, bytestring, cereal, containers
     , deepseq, MonadRandom, profunctors, random, semigroups
     , transformers
     }:
     mkDerivation {
       pname = "auto";
       version = "0.4.3.1";
       sha256 = "0h9vrljhq9nlmi2j9wszpay0yli4n4r993mwamg69qqppcf6vqn6";
       libraryHaskellDepends = [
         base base-orphans bytestring cereal containers deepseq MonadRandom
         profunctors random semigroups transformers
       ];
       homepage = "https://github.com/mstksg/auto";
       description = "Denotative, locally stateful programming DSL & platform";
       license = stdenv.lib.licenses.mit;
     }) {};
  "auto-update" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "auto-update";
       version = "0.1.4";
       sha256 = "09dlh2alsx2mw5kvj931yhbj0aw7jmly2cm9xbscm2sf098w35jy";
       libraryHaskellDepends = [ base ];
       homepage = "https://github.com/yesodweb/wai";
       description = "Efficiently run periodic, on-demand actions";
       license = stdenv.lib.licenses.mit;
     }) {};
  "autoexporter" = callPackage
    ({ mkDerivation, base, Cabal, directory, filepath }:
     mkDerivation {
       pname = "autoexporter";
       version = "1.1.10";
       sha256 = "0rf28h7nzm5ngcrj1900d0vgwbfr1y3s4q7wwbvdw2mg29rw4f0r";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ base Cabal directory filepath ];
       executableHaskellDepends = [ base Cabal directory filepath ];
       homepage = "https://github.com/tfausak/autoexporter#readme";
       description = "Automatically re-export modules";
       license = stdenv.lib.licenses.mit;
     }) {};
  "avro" = callPackage
    ({ mkDerivation, aeson, array, base, base16-bytestring, binary
     , bytestring, containers, data-binary-ieee754, directory, entropy
     , extra, fail, hashable, hspec, lens, lens-aeson, mtl, pure-zlib
     , QuickCheck, scientific, semigroups, tagged, template-haskell
     , text, transformers, unordered-containers, vector
     }:
     mkDerivation {
       pname = "avro";
       version = "0.3.4.2";
       sha256 = "0g6y8f6j38n52vqwj185lyqc666cqrmgd6pn3427cqlhcj927b7v";
       libraryHaskellDepends = [
         aeson array base base16-bytestring binary bytestring containers
         data-binary-ieee754 entropy fail hashable mtl pure-zlib scientific
         semigroups tagged template-haskell text unordered-containers vector
       ];
       testHaskellDepends = [
         aeson array base base16-bytestring binary bytestring containers
         directory entropy extra fail hashable hspec lens lens-aeson mtl
         pure-zlib QuickCheck scientific semigroups tagged template-haskell
         text transformers unordered-containers vector
       ];
       homepage = "https://github.com/GaloisInc/avro#readme";
       description = "Avro serialization support for Haskell";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "avwx" = callPackage
    ({ mkDerivation, attoparsec, base, HTTP, lens, optparse-applicative
     , parsers, pretty-show, text
     }:
     mkDerivation {
       pname = "avwx";
       version = "0.3.0.2";
       sha256 = "02pvh2i1f96k3pyrmdb3jv2ia7mcp8q5pw067psr8k2sw329qadl";
       isLibrary = true;
       isExecutable = true;
       libraryHaskellDepends = [ attoparsec base HTTP lens parsers text ];
       executableHaskellDepends = [
         base optparse-applicative pretty-show text
       ];
       testHaskellDepends = [ attoparsec base lens pretty-show text ];
       homepage = "https://www.hcesperer.org/posts/2016-09-20-avwx.html";
       description = "Parse aviation weather reports";
       license = stdenv.lib.licenses.mit;
     }) {};
  "backprop" = callPackage
    ({ mkDerivation, base, containers, criterion, deepseq, directory
     , hmatrix, microlens, microlens-th, mwc-random, primitive
     , reflection, simple-reflect, time, transformers, vector, vinyl
     }:
     mkDerivation {
       pname = "backprop";
       version = "0.2.5.0";
       sha256 = "1xbbmv6cp9n21x2bqpr0p4cls994mchxp7hd7k6ib83avr0vwbda";
       libraryHaskellDepends = [
         base containers deepseq microlens primitive reflection
         simple-reflect transformers vector vinyl
       ];
       benchmarkHaskellDepends = [
         base criterion deepseq directory hmatrix microlens microlens-th
         mwc-random time vector
       ];
       homepage = "https://backprop.jle.im";
       description = "Heterogeneous automatic differentation";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "bank-holidays-england" = callPackage
    ({ mkDerivation, base, containers, hspec, QuickCheck, time }:
     mkDerivation {
       pname = "bank-holidays-england";
       version = "0.1.0.7";
       sha256 = "196ldac7aljysw8m4nzdyf5mygswbckkvd6axm8a9yw4vchzcjks";
       libraryHaskellDepends = [ base containers time ];
       testHaskellDepends = [ base containers hspec QuickCheck time ];
       homepage = "https://bitbucket.org/davecturner/bank-holidays-england";
       description = "Calculation of bank holidays in England and Wales";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "barrier" = callPackage
    ({ mkDerivation, base, blaze-svg, bytestring, template-haskell
     , text, unordered-containers
     }:
     mkDerivation {
       pname = "barrier";
       version = "0.1.1";
       sha256 = "1n8yx66lvyn90ixyvpjafrmhpgnznnqj9il5rixlr651xq0xm5b3";
       revision = "1";
       editedCabalFile = "167akvi72l47gcqbq5609m24469pq0xmv0kjbmivnrxs796gh890";
       isLibrary = true;
       isExecutable = true;
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [
         base blaze-svg bytestring template-haskell text
         unordered-containers
       ];
       doCheck = false;
       homepage = "https://github.com/philopon/barrier";
       description = "Shields.io style badge generator";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base-compat" = callPackage
    ({ mkDerivation, base, unix }:
     mkDerivation {
       pname = "base-compat";
       version = "0.10.4";
       sha256 = "0ksp990gxs731mq19rzbxrbs43nazfljjc8krlx5bjqblw3kfs8d";
       libraryHaskellDepends = [ base unix ];
       description = "A compatibility layer for base";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base-compat-batteries" = callPackage
    ({ mkDerivation, base, base-compat, hspec, hspec-discover
     , QuickCheck
     }:
     mkDerivation {
       pname = "base-compat-batteries";
       version = "0.10.1";
       sha256 = "1j8ky6241mj1ymbwm9scvyvbknj7n2r56cnkg9y1zf2xwjpqnmqm";
       libraryHaskellDepends = [ base base-compat ];
       testHaskellDepends = [ base hspec QuickCheck ];
       testToolDepends = [ hspec-discover ];
       description = "base-compat with extra batteries";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base-orphans" = callPackage
    ({ mkDerivation, base, ghc-prim, hspec, hspec-discover, QuickCheck
     }:
     mkDerivation {
       pname = "base-orphans";
       version = "0.7";
       sha256 = "057f9npnqk71ccfh95djfkpd54dzazphj06grwxa3fyhwcwxrb8a";
       libraryHaskellDepends = [ base ghc-prim ];
       testHaskellDepends = [ base hspec QuickCheck ];
       testToolDepends = [ hspec-discover ];
       homepage = "https://github.com/haskell-compat/base-orphans#readme";
       description = "Backwards-compatible orphan instances for base";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base-prelude" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "base-prelude";
       version = "1.3";
       sha256 = "1zk728sd09hh2r4xwz4lazsrrgg5cshydn64932sm0vckplndk73";
       libraryHaskellDepends = [ base ];
       doCheck = false;
       homepage = "https://github.com/nikita-volkov/base-prelude";
       description = "The most complete prelude formed solely from the \"base\" package";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base-unicode-symbols" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "base-unicode-symbols";
       version = "0.2.2.4";
       sha256 = "1afc5pchd3vw33bmjbjygkd0l5zh7glbsx4bfyxfscpc1x1l3y52";
       libraryHaskellDepends = [ base ];
       homepage = "http://haskell.org/haskellwiki/Unicode-symbols";
       description = "Unicode alternatives for common functions and operators";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "base16-bytestring" = callPackage
    ({ mkDerivation, base, bytestring, ghc-prim }:
     mkDerivation {
       pname = "base16-bytestring";
       version = "0.1.1.6";
       sha256 = "0jf40m3yijqw6wd1rwwvviww46fasphaay9m9rgqyhf5aahnbzjs";
       libraryHaskellDepends = [ base bytestring ghc-prim ];
       homepage = "http://github.com/bos/base16-bytestring";
       description = "Fast base16 (hex) encoding and decoding for ByteStrings";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "base32string" = callPackage
    ({ mkDerivation, aeson, base, binary, bytestring, hspec, text }:
     mkDerivation {
       pname = "base32string";
       version = "0.9.1";
       sha256 = "0cpa6bvam4zd2l2hb3sdngj0dx482c9rkz4jj87n6pxsmq9id4wy";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [ aeson base binary bytestring text ];
       testHaskellDepends = [ base binary bytestring hspec text ];
       homepage = "http://www.leonmergen.com/opensource.html";
       description = "Fast and safe representation of a Base-32 string";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base58string" = callPackage
    ({ mkDerivation, aeson, base, binary, bytestring, hspec, text }:
     mkDerivation {
       pname = "base58string";
       version = "0.10.0";
       sha256 = "1260x4bkrizvnmylm237gpi92wazh31md9nf982sac3fsxyn0wiv";
       enableSeparateDataOutput = true;
       libraryHaskellDepends = [ aeson base binary bytestring text ];
       testHaskellDepends = [ base binary bytestring hspec text ];
       homepage = "http://www.leonmergen.com/opensource.html";
       description = "Fast and safe representation of a Base-58 string";
       license = stdenv.lib.licenses.mit;
     }) {};
  "base64-bytestring" = callPackage
    ({ mkDerivation, base, bytestring, containers, HUnit, QuickCheck
     , test-framework, test-framework-hunit, test-framework-quickcheck2
     }:
     mkDerivation {
       pname = "base64-bytestring";
       version = "1.0.0.1";
       sha256 = "0l1v4ddjdsgi9nqzyzcxxj76rwar3lzx8gmwf2r54bqan3san9db";
       libraryHaskellDepends = [ base bytestring ];
       testHaskellDepends = [
         base bytestring containers HUnit QuickCheck test-framework
         test-framework-hunit test-framework-quickcheck2
       ];
       homepage = "https://github.com/bos/base64-bytestring";
       description = "Fast base64 encoding and decoding for ByteStrings";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "base64-bytestring-type" = callPackage
    ({ mkDerivation, aeson, base, base-compat, base64-bytestring
     , binary, bytestring, cereal, deepseq, hashable, QuickCheck, text
     }:
     mkDerivation {
       pname = "base64-bytestring-type";
       version = "1";
       sha256 = "0h74c0qhf4n0pamrl29ha5hgf940bay0dhl8rifaw4l03z8rn0bl";
       revision = "3";
       editedCabalFile = "18p6iz3b73qyf76azhfpcpgsc1fb2qhv889l0cj1niqlyp7kw69s";
       libraryHaskellDepends = [
         aeson base base-compat base64-bytestring binary bytestring cereal
         deepseq hashable QuickCheck text
       ];
       doCheck = false;
       homepage = "https://github.com/futurice/haskell-base64-bytestring-type#readme";
       description = "A newtype around ByteString, for base64 encoding";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "base64-string" = callPackage
    ({ mkDerivation, base }:
     mkDerivation {
       pname = "base64-string";
       version = "0.2";
       sha256 = "0pkhrimabacsjalzq0y3a197fqfbspsbv8xszzg4vbb1fb59dj1y";
       libraryHaskellDepends = [ base ];
       homepage = "http://urchin.earth.li/~ian/cabal/base64-string/";
       description = "Base64 implementation for String's";
       license = "unknown";
     }) {};
  "basement" = callPackage
    ({ mkDerivation, base, ghc-prim }:
     mkDerivation {
       pname = "basement";
       version = "0.0.8";
       sha256 = "194jw567di4q2758943q9rrwkbf9gl261my7qc21i9xhyabipx67";
       libraryHaskellDepends = [ base ghc-prim ];
       homepage = "https://github.com/haskell-foundation/foundation#readme";
       description = "Foundation scrap box of array & string";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "basic-prelude" = callPackage
    ({ mkDerivation, base, bytestring, containers, filepath, hashable
     , text, transformers, unordered-containers, vector
     }:
     mkDerivation {
       pname = "basic-prelude";
       version = "0.7.0";
       sha256 = "0yckmnvm6i4vw0mykj4fzl4ldsf67v8d2h0vp1bakyj84n4myx8h";
       libraryHaskellDepends = [
         base bytestring containers filepath hashable text transformers
         unordered-containers vector
       ];
       homepage = "https://github.com/snoyberg/basic-prelude#readme";
       description = "An enhanced core prelude; a common foundation for alternate preludes";
       license = stdenv.lib.licenses.mit;
     }) {};
  "bbdb" = callPackage
    ({ mkDerivation, base, hspec, parsec }:
     mkDerivation {
       pname = "bbdb";
       version = "0.8";
       sha256 = "0p1aphzp55h4zlh3h8xnm6mxvsxyrab98ms8f07iqvp4p267kryw";
       libraryHaskellDepends = [ base parsec ];
       testHaskellDepends = [ base hspec parsec ];
       homepage = "https://github.com/henrylaxen/bbdb";
       description = "Ability to read, write, and modify BBDB files";
       license = stdenv.lib.licenses.gpl3;
     }) {};
  "bcrypt" = callPackage
    ({ mkDerivation, base, bytestring, data-default, entropy, memory }:
     mkDerivation {
       pname = "bcrypt";
       version = "0.0.11";
       sha256 = "1vzwf9g6mvn4v1cn1m0axjyi2l0glnvv8c49v1j51dm7xn41fcz4";
       libraryHaskellDepends = [
         base bytestring data-default entropy memory
       ];
       description = "Haskell bindings to the bcrypt password hash";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "beam-core" = callPackage
    ({ mkDerivation, aeson, base, bytestring, containers, dlist, free
     , ghc-prim, hashable, microlens, mtl, network-uri, tagged, tasty
     , tasty-hunit, text, time, vector-sized
     }:
     mkDerivation {
       pname = "beam-core";
       version = "0.7.2.2";
       sha256 = "160ga0w0i1l4nbag6jg8wn3a3csid93x6fdd4j4pah2zk7dswc8j";
       revision = "1";
       editedCabalFile = "1fvds5arsm0h81fw4rf5fsg5sa9jfqn350amhhc247f0hhjy3csf";
       libraryHaskellDepends = [
         aeson base bytestring containers dlist free ghc-prim hashable
         microlens mtl network-uri tagged text time vector-sized
       ];
       testHaskellDepends = [
         base bytestring tasty tasty-hunit text time
       ];
       homepage = "http://travis.athougies.net/projects/beam.html";
       description = "Type-safe, feature-complete SQL query and manipulation interface for Haskell";
       license = stdenv.lib.licenses.mit;
     }) {};
  "beam-migrate" = callPackage
    ({ mkDerivation, aeson, base, beam-core, bytestring, containers
     , deepseq, dependent-map, dependent-sum, free, ghc-prim, hashable
     , haskell-src-exts, mtl, parallel, pqueue, pretty, scientific, text
     , time, unordered-containers, uuid-types, vector
     }:
     mkDerivation {
       pname = "beam-migrate";
       version = "0.3.2.1";
       sha256 = "0wwkyg87wf3qcj8c5j3ammdkmjacgzw35pgxbq75bvfkx8k5j69d";
       revision = "1";
       editedCabalFile = "1ghg6n0dj63i0am7wh0cg95hwyf29gnkm0llrw3wb5pj8f7937gv";
       libraryHaskellDepends = [
         aeson base beam-core bytestring containers deepseq dependent-map
         dependent-sum free ghc-prim hashable haskell-src-exts mtl parallel
         pqueue pretty scientific text time unordered-containers uuid-types
         vector
       ];
       homepage = "https://travis.athougies.net/projects/beam.html";
       description = "SQL DDL support and migrations support library for Beam";
       license = stdenv.lib.licenses.mit;
     }) {};
  "bench" = callPackage
    ({ mkDerivation, base, criterion, optparse-applicative, process
     , silently, text, turtle
     }:
     mkDerivation {
       pname = "bench";
       version = "1.0.12";
       sha256 = "1sy97qpv6paar2d5syppk6lc06wjx6qyz5aidsmh30jq853nydx6";
       isLibrary = false;
       isExecutable = true;
       executableHaskellDepends = [
         base criterion optparse-applicative process silently text turtle
       ];
       doHaddock = false;
       homepage = "https://github.com/Gabriel439/bench";
       description = "Command-line benchmark tool";
       license = stdenv.lib.licenses.bsd3;
     }) {};
  "bencode" = callPackage
    ({ mkDerivation, base, binary, bytestring, containers, parsec }:
     mkDerivation {
       pname = "bencode";
       version = "0.6.0.0";
       sha256 = "12pnh598k30ggs54f0pic19j7ji8f4xn7fydkdnlig79rvzgv3iv";
       libraryHaskellDepends = [
         base binary bytestring containers parsec
       ];
       description = "Parser and printer for bencoded data";
       license = s